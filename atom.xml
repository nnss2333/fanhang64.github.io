<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HangZo&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fanhang64.github.io/"/>
  <updated>2021-01-28T14:31:44.124Z</updated>
  <id>https://fanhang64.github.io/</id>
  
  <author>
    <name>HangZo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序总结</title>
    <link href="https://fanhang64.github.io/2021/01/07/%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://fanhang64.github.io/2021/01/07/排序总结/</id>
    <published>2021-01-07T10:13:21.000Z</published>
    <updated>2021-01-28T14:31:44.124Z</updated>
    
    <content type="html"><![CDATA[<ol><li>稳定性：如果存在重复关键字，原则排序算法时，要考虑稳定性。例如：50(a)在50(b)之前，排完序后扔在之前，说明稳定</li></ol><h3 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h3><h4 id="1-直接插入"><a href="#1-直接插入" class="headerlink" title="1) 直接插入"></a>1) 直接插入</h4><ol><li>将待排序记录，插入到已排好的有序序列中，重复n-1次</li><li>代码<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;  <span class="comment">// 带排序数组在a，元素个数为n，从下标1开始存储</span></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; a[i<span class="number">-1</span>])&#123; <span class="comment">// 如果是为正序，这里不执行。</span></span><br><span class="line">            a[<span class="number">0</span>] = a[i];  <span class="comment">// a[0]为哨兵</span></span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;a[<span class="number">0</span>]&lt;a[j];--j)&#123;</span><br><span class="line">                a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">            &#125;</span><br><span class="line">            a[j+<span class="number">1</span>] = a[<span class="number">0</span>];  <span class="comment">// 找到插入位置，将暂存关键字插入</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="3"><li>例题<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/45214150543925a7729207ebc8bd5b0a?method=download&amp;shareKey=d6cf23e227d13460e26c02b27a95d048&amp;inline=true" alt="image"></p></blockquote></li><li>分析<blockquote><p>1) 最坏情况，整个序列逆序的，此时时间复杂度为O(n^2)<br><br>2) 最好的情况，整个序列已经有序，内层循环不执行，则时间复杂度为O(n)。<br><br>3) 空间复杂度为O(1)<br><br>4) 一趟排序后，不能确定一个关键字到达最后位置。插入类排序共同特点<br><br>5) 一种稳定排序算法<br>6) 直接插入最坏情况下，比较次数为n(n-1)/2，最好情况下为n-1</p></blockquote></li></ol><h4 id="2-折半插入"><a href="#2-折半插入" class="headerlink" title="2) 折半插入"></a>2) 折半插入</h4><ol><li>折半插入排序，通过折半查找法确定插入位置。</li><li>基本条件：<strong>序列已经有序</strong>。</li><li><p>例题</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/fc851c8a4bd12df84c782bb29b3bdfe9?method=download&amp;shareKey=7c98ec6d04f8d0333fa092b17c70417c&amp;inline=true" alt="image"></p></blockquote></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,low,high,mid;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123; <span class="comment">// 将a[2]至a[n]插入到前面已经排好序的序列</span></span><br><span class="line">        a[<span class="number">0</span>]=a[i];</span><br><span class="line">        low = <span class="number">1</span>; high= i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">            mid = (low+high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid] &gt; a[<span class="number">0</span>])&#123;</span><br><span class="line">                high = mid <span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low =mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=high+<span class="number">1</span>;--j)&#123;</span><br><span class="line">            a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        a[j+<span class="number">1</span>] = a[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>性能分析</p><blockquote><p>1) 平均时间复杂度O(n^2)<br><br>2) 稳定的插入排序<br><br>3) 关键字比较次数与初始序列无关。<br>4) 只是比直接插入少了比较次数，约为O(nlogn)</p></blockquote></li></ol><h4 id="3-希尔排序"><a href="#3-希尔排序" class="headerlink" title="3) 希尔排序"></a>3) 希尔排序</h4><ol><li>先将待排序序列分割成若干个子序列，分别进行直接插入排序，基本有序后，在整体进行直接插入排序。</li><li><p>步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) 按照增量d，将序列分成几个子序列。</span><br><span class="line">2) 对子序列排序(直接插入排序)</span><br><span class="line">3) 缩小增量d，重复1，2步，直到增量d=1</span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 希尔排序</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellInsert</span><span class="params">(sqList &amp;L, <span class="keyword">int</span> dk)</span></span>&#123;   <span class="comment">// L顺序表，dk为增量</span></span><br><span class="line">    <span class="keyword">for</span>(i = dk+<span class="number">1</span>;i≤L.length;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L.r[i].key&lt;L.r[i-dk].key)&#123;  <span class="comment">// </span></span><br><span class="line">            L.r[<span class="number">0</span>] = L.r[i];  <span class="comment">// 暂存到L.r[0]</span></span><br><span class="line">            <span class="keyword">for</span>(j=i-dk; j&gt;<span class="number">0</span> &amp;&amp; (L.r[<span class="number">0</span>].key &lt; L.r[j].key); j-=dk)&#123;  <span class="comment">// 记录后移，寻找插入位置</span></span><br><span class="line">                L.r[j+dk] = L.r[j];</span><br><span class="line">            &#125;</span><br><span class="line">            L.r[j+dk] = L.r[<span class="number">0</span>];  <span class="comment">// 插入到指定位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>例题</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/9b03ac6a5228765d4a77ecdee3d70296?method=download&amp;shareKey=a1ca6aca17cbde7dda54073c8ad8871b&amp;inline=true" alt="image"></p></blockquote></li><li><p>性能分析</p><blockquote><p>1) 希尔排序增量最后一定为1<br>2) 希尔排序为不稳定排序。<br>3) 时间复杂度大约为O(n^1.5)<br>4) 空间复杂度为O(1)<br>5) 按增量分组，组内采用直接插入排序。</p></blockquote></li></ol><h3 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h3><h4 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1) 冒泡排序"></a>1) 冒泡排序</h4><ol><li>依次比较相邻元素，逆序则交换，n个元素重复n-1次。</li><li><p>冒泡排序<strong>一趟确定一个元素的最终位置</strong>(可能会多次交换)。</p></li><li><p>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void bubblesorSort(int a[], int n)&#123;  // 数组元素下标从0-n-1</span><br><span class="line">    for(i=n-1; i&gt;=1;i--)&#123; // n个关键字最多要n-1趟</span><br><span class="line">        flag = 0;</span><br><span class="line">        for(j=1;j&lt;=i;j++)&#123;</span><br><span class="line">            if(a[j-1]&gt;a[j])&#123;</span><br><span class="line">                temp = a[j-1];</span><br><span class="line">                a[j-1] = a[j];</span><br><span class="line">                a[j] = temp;</span><br><span class="line">                flag = 1; // 如果没发生交换，则flag为0，发生交换值为1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag == 0)&#123; // 如果一趟排序，没有发生关键字交换，则证明有序，排序结束。</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>性能分析</p><blockquote><p>1) n个关键字，需要n-1趟<br>2) 时间复杂度最坏情况，为逆序序列，时间复杂度为O(n^2)<br>3) 最好情况，序列有序，内层循环if始终不成立，flag为0，内层循环执行n-1次比较，执行结束。<br>4) 空间复杂度为O(1)<br>5) 每一趟都会确定一个元素在最终位置上。<br>6) 24个关键字，冒泡排序最少比较次数23次(本代码中的第1趟)。</p></blockquote></li></ol><h4 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2) 快速排序"></a>2) 快速排序</h4><ol><li>每一趟选择当前所有子序列的一个关键字(通常第一个)作为枢轴，将子序列中比枢轴小的移到枢轴前，比枢轴大的元素，移动到枢轴后。</li><li><p>例题</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/36661b60354f07083588229b02628daf?method=download&amp;shareKey=02b481903df743c9aac03658dc05e85e&amp;inline=true" alt="image"></p></blockquote></li><li><p>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void QuickSort(int a[], int low, int high)&#123;</span><br><span class="line">   int pivot;</span><br><span class="line">   int i = low;</span><br><span class="line">   int j = high;</span><br><span class="line">   if(low &lt; high)&#123;</span><br><span class="line">       pivot = a[low];</span><br><span class="line">       while(i&lt;j)&#123;</span><br><span class="line">           while(i&lt;j &amp;&amp; a[j] &gt;= pivot) j--;  // 找小于pivot的位置</span><br><span class="line">           a[i] = a[j];</span><br><span class="line">           while(i&lt;j &amp;&amp; a[i] &lt;= pivot) i++;</span><br><span class="line">           a[j] = a[i];</span><br><span class="line">       &#125;</span><br><span class="line">       a[i] = pivot;</span><br><span class="line">       QuickSort(a, low, i-1);</span><br><span class="line">       QuickSort(a, i+1, high);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>性能分析</p><blockquote><p>1) 平均时间复杂度O(nlogn)，最坏情况时间复杂度为O(n^2)<br>2) 平均空间复杂度为O(logn)，递归进行，需要用到栈，最坏情况下为O(n)。<br>3) 待排序列越接近无序，算法效率越好；若序列基本有序，则退化为冒泡排序。<br>4) 快速排序是不稳定的排序算法。<br>5) 当每次的枢轴把表等分为两个长度相近的子表时候，速度最快。例如：第一趟，枢轴值21将表划分为两个子表{9，17，5}和{25，23，30}<br>6) 快排<strong>每趟可以有一个元素处于最终位置</strong> 上。(枢轴处于最终位置)<br>7) 如果第一趟执行完(8，9，4，3，6，1)，10，(12，18，18)，第二趟执行结束为(1，6，4，3)，8，(9)，10，12，(18，18)，两个子序列同时排序，算第二趟。</p></blockquote></li></ol><h3 id="选择类排序"><a href="#选择类排序" class="headerlink" title="选择类排序"></a>选择类排序</h3><h4 id="1-简单选择排序"><a href="#1-简单选择排序" class="headerlink" title="1) 简单选择排序"></a>1) 简单选择排序</h4><ol><li>在待排序列中，选取最小的，交换到合适位置，重复n-1次(n-1趟)。</li><li>每一趟存在多次比较，找出最小的元素下标。</li><li><p>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void selectionsorSort(int a[], int n)&#123;</span><br><span class="line">    for(i=0;i&lt;n-1;i++)&#123;</span><br><span class="line">        k = i;</span><br><span class="line">        for(j=i+1;j&lt;n;j++)&#123;</span><br><span class="line">            if(a[j] &lt; a[k]) k=j;  // 最小元素下标</span><br><span class="line">        &#125;</span><br><span class="line">        if(k!=i) a[i]←→[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>性能分析</p><blockquote><p>1) 时间复杂度为O(n^2)<br>2) 循环的执行次数与初始序列无关。<br>3) 空间复杂度为O(1)<br>4) 简单选择为不稳定的算法。</p></blockquote></li></ol><h4 id="2-堆排序-适用于关键字较多"><a href="#2-堆排序-适用于关键字较多" class="headerlink" title="2) 堆排序(适用于关键字较多)"></a>2) 堆排序(适用于关键字较多)</h4><ol><li>堆排序可以看成一棵<strong>完全二叉树</strong>，任何非叶结点的值，都不大于其左右孩子结点的值。</li><li>大顶堆(升序)：父结点大，孩子小(大顶堆的堆顶为最大元素)。</li><li>小顶堆(降序)：孩子大，父结点小(小顶堆的堆顶为最小元素)。</li><li><p>例题：判断是否构成堆</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/1bff17da0cf9e080f5476ee0edba7976?method=download&amp;shareKey=e810aad6bca823f01837cfa0e5870dd6&amp;inline=true" alt="image"></p></blockquote></li><li><p>建立堆(筛选法，反复筛选的过程)，插入结点，删除结点</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/a6d2ceb55beef4794ed89d71b3de614b?method=download&amp;shareKey=154ed00504029a45d60c305df90620aa&amp;inline=true" alt="image"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">插入结点：插入结点时候，需要先将插入的结点x，放在最低层的最右边，然后对插入后的堆进行调整。</span><br><span class="line">删除结点：删除结点时候，用最底层最右边的结点，覆盖删除结点的位置，并重新调整。</span><br><span class="line"></span><br><span class="line">用筛选法构造初始堆，n个元素，必须从第 n/2下取整  个元素开始进行筛选。</span><br></pre></td></tr></table></figure></li><li><p>例题：堆排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">步骤：</span><br><span class="line">1) 首先建好大顶堆(或小顶堆)，输出堆顶x，再将堆顶元素x和最后一个元素y(编号最后)交换。</span><br><span class="line">2) 重新调整，并重复</span><br></pre></td></tr></table></figure></li></ol><p>   如题：</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/303eb325e9a3928c72faef8b38fdde7f?method=download&amp;shareKey=291f27ed0393155ae780a0558af728ec&amp;inline=true" alt="image"></p></blockquote><ol start="7"><li><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> sqlist HeapType;  <span class="comment">// 顺序表存储</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(HeapType &amp;H, <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">     rc = H.r[s];</span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">2</span>*s; j≤m; j*=<span class="number">2</span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(j&lt;m &amp;&amp; (H.r[j].key &lt; H.r[j+<span class="number">1</span>].key)) ++j;</span><br><span class="line">         <span class="keyword">if</span>(rc.key ≥ H.r[j].key) <span class="keyword">break</span>;</span><br><span class="line">     </span><br><span class="line">         H.r[s] = H.r[j]; s= j;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     H.r[s] = rc;  <span class="comment">//插入</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Heapsort</span><span class="params">(HeapType &amp;H)</span></span>&#123;</span><br><span class="line">     <span class="comment">// 对顺序表H进行堆排序</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 这里是将顺序表构建为堆</span></span><br><span class="line">     <span class="keyword">for</span>(i=H.length/<span class="number">2</span>;i&gt;<span class="number">0</span>; --i)&#123;  <span class="comment">// 最后一个非叶子结点开始筛选，最后一个非叶节点为length/2。</span></span><br><span class="line">         HeadAdjust(H,i,H.length);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(i=H.length; i&gt;<span class="number">1</span>; --i)&#123;</span><br><span class="line">         H.r[<span class="number">1</span>] ↔ H.r[i];  <span class="comment">// 将堆顶元素和当前未经排序子序列H.r[1...i]的最后一个记录互换</span></span><br><span class="line">         HeapAdjust(H,<span class="number">1</span>,i<span class="number">-1</span>); <span class="comment">// 将剩余的H.r[1...i-1]重新调整为大顶堆</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>性能分析</p><blockquote><ol><li>堆排序不稳定。</li><li>建立堆的时间复杂度为O(n), 时间复杂度最好，最坏，平均都为O(nlogn)</li><li>空间复杂度为O(1)</li><li>适用于关键字较多的情况(例如：10000个关键字选出前10个)</li><li>以二叉树的任意结点出发到根的路径上所经过的结点序列按其关键字有序。</li><li>具有n个结点插入新元素的时间复杂度为O(logn)，删除一个元素的时间复杂度为O(logn)</li></ol></blockquote></li></ol><h3 id="2路归并排序"><a href="#2路归并排序" class="headerlink" title="2路归并排序"></a>2路归并排序</h3><ol><li><p>例题</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/65eca0e6dbb347bf266974503d88c484?method=download&amp;shareKey=b319e8f827ab9254298dd89daed74e50&amp;inline=true" alt="image"></p></blockquote></li><li><p>性能分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 时间复杂度为O(nlogn)</span><br><span class="line">2. 空间复杂度为O(n)</span><br><span class="line">3. 归并排序一轮不会确定一个元素的最终位置。</span><br></pre></td></tr></table></figure></li></ol><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><ol><li>多关键字排序</li><li>最高位优先：先按最高位排成若干子序列，然后在对子序列按次高排序。</li><li>最低位优先：采用“分配”和“收集”策略。</li><li><p>例题</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/f4d481492697fb085c8f0a6cc9ddbae5?method=download&amp;shareKey=7399b697cb1bc8608eab868d94bdfbd3&amp;inline=true" alt="image"></p></blockquote></li><li><p>性能分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 对n个元素进行基数排序，每个数据基数为rd(基数为每个位的范围，例如从0-9)，有d位数字(每个关键字位数)，一趟分配和收集用时n+rd，共d趟，故总时间复杂度为O(d(n+rd))</span><br><span class="line">2. 基数排序为稳定算法。</span><br><span class="line">3. 基数排序，不需要进行关键字比较。</span><br></pre></td></tr></table></figure></li></ol><h3 id="内部排序总结"><a href="#内部排序总结" class="headerlink" title="内部排序总结"></a>内部排序总结</h3><ol><li>时间复杂度：平均情况下，快排，希尔，堆排序，归并排序，时间复杂度都为O(nlog<sub>2</sub>n)，其余都为O(n^2)</li><li>空间复杂度：快排O(log<sub>2</sub>n)，归并为O(n)，基数为O(rd)，其余都为O(1)</li><li><strong>直接插入和冒泡</strong>，在初始序列已经有序时，时间复杂度为<strong>O(n)</strong></li><li>稳定性：快排，希尔，堆排序，简单选择，四种为不稳定，其余都为稳定。</li><li>经过一趟排序，<strong>可以保证关键字达到最终位置</strong>，是<strong>交换类</strong>(气泡，快排)和<strong>选择类</strong>(简单选择，堆)排序。</li><li><strong>关键字比较次数与初始序列无关</strong>：简单选择和折半插入</li><li><strong>排序趟数与原始序列有关</strong>：交换类(冒泡，快排)</li></ol><h3 id="外部排序总结"><a href="#外部排序总结" class="headerlink" title="外部排序总结"></a>外部排序总结</h3><ol><li>m个初始归并段进行k路归并，归并的趟数为<sup>┌</sup>log<sub>k</sub>m<sup>┐</sup></li><li>每一次归并，所有记录都要进行<strong>两次I/O操作</strong></li><li>置换-选择排序中，所有记录都要进行<strong>两次I/O操作</strong></li><li>K路归并的败者树的高度为<sup>┌</sup>log<sub>2</sub>k<sup>┐</sup>+1，因此利用败者树从k个记录中选出最值需要进行<sup>┌</sup>log<sub>2</sub>k<sup>┐</sup>次比较，即时间复杂度为O(log<sub>2</sub>k)</li><li>k路归并败者树的建树时间复杂度为O(klog<sub>2</sub>k)</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;稳定性：如果存在重复关键字，原则排序算法时，要考虑稳定性。例如：50(a)在50(b)之前，排完序后扔在之前，说明稳定&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;插入类排序&quot;&gt;&lt;a href=&quot;#插入类排序&quot; class=&quot;headerlink&quot; title=&quot;插入类排序&quot;&gt;&lt;/a&gt;插入类排序&lt;/h3&gt;&lt;h4 id=&quot;1-直接插入&quot;&gt;&lt;a href=&quot;#1-直接插入&quot; class=&quot;headerlink&quot; title=&quot;1) 直接插入&quot;&gt;&lt;/a&gt;1) 直接插入&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;将待排序记录，插入到已排好的有序序列中，重复n-1次&lt;/li&gt;
&lt;li&gt;代码&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insertSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;span class=&quot;comment&quot;&gt;// 带排序数组在a，元素个数为n，从下标1开始存储&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;i&amp;lt;=n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[i] &amp;lt; a[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&amp;#123; &lt;span class=&quot;comment&quot;&gt;// 如果是为正序，这里不执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = a[i];  &lt;span class=&quot;comment&quot;&gt;// a[0]为哨兵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j=i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&amp;lt;a[j];--j)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                a[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = a[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];  &lt;span class=&quot;comment&quot;&gt;// 找到插入位置，将暂存关键字插入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="https://fanhang64.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="快速排序" scheme="https://fanhang64.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
      <category term="希尔排序" scheme="https://fanhang64.github.io/tags/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    
      <category term="堆排序" scheme="https://fanhang64.github.io/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>查找总结</title>
    <link href="https://fanhang64.github.io/2021/01/07/%E6%9F%A5%E6%89%BE%E6%80%BB%E7%BB%93/"/>
    <id>https://fanhang64.github.io/2021/01/07/查找总结/</id>
    <published>2021-01-07T10:11:50.000Z</published>
    <updated>2021-01-28T14:28:24.745Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>静态查找表：只进行<strong>查找操作</strong>，例如：顺序查找，折半查找，索引顺序表。</li><li>动态查找表：可进行<strong>查找</strong>，<strong>插入</strong>，<strong>删除</strong>，例如：二叉排序树，平衡二叉树(AVL树)，B树等。</li><li>平均查找长度(ASL)：关键字比较次数的平均值。</li></ol><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><ol><li>特点：简单，既可以顺序，也可以链式。</li><li>等概率情况下，查找成功的平均查找长度：<strong>ASL=(1+2+3..+n)/n = (1+n)/2</strong>。(第一次查找成功，比较1次，第二次比较两次成功…)</li><li>顺序查找的判定树为一棵深度为n的单分支的树。</li><li>时间复杂度为O(n)</li><li>代码：<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 在数组a的前n个元素中查找x</span><br><span class="line">int search(int a[], int n, int x) // n为长度，x为要查找的元素</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = n-1; i&gt;= 0;i++)&#123;</span><br><span class="line">        if (a[i] == x)&#123;</span><br><span class="line">           return i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;  //未找到</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><ol><li>适用于<strong>有序的顺序表</strong>，只能<strong>顺序存储结构</strong>。</li><li><p>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 非递归折半查找</span><br><span class="line">int binarysearch(int a[], int n, int x)&#123;</span><br><span class="line">    low = 0; high = n-1;</span><br><span class="line">    </span><br><span class="line">    while(low &lt;= high)&#123;</span><br><span class="line">        mid = (low + high) /2;</span><br><span class="line">        </span><br><span class="line">        if(a[mid] &gt; x)&#123;</span><br><span class="line">            high = mid -1;</span><br><span class="line">        &#125;else if(a[mid] &lt; x)&#123;</span><br><span class="line">            low = mid +1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 递归折半查找</span><br><span class="line">int binarysearch(int a[], int low, int high, int x)&#123;</span><br><span class="line">    if (low &gt; high)&#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    mid = (low+high)/2;</span><br><span class="line">    if (a[mid] == x)&#123;</span><br><span class="line">        return mid;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (a[mid] &gt; x)&#123;</span><br><span class="line">        return binarysearch(a, low, mid-1, x);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return biarysearch(a, mid+1, high, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判定树类似于完全二叉树，深度为 <strong><sub>└</sub>log<sub>2</sub>n<sub>┘</sub>+1</strong> </p></li><li><p>画判定树</p><blockquote><p>例如：画出n=10的有序表折半查找的判定树。<br><br><br>  <img src="https://note.youdao.com/yws/api/personal/file/e951a2926cda1e83a54d6fddfdbc40ed?method=download&amp;shareKey=19d30fc5bf1a73ce82730f2226a4c30f&amp;inline=true" alt="image"></p></blockquote></li><li><p>时间复杂度为O(logn)</p></li></ol><h3 id="索引顺序表"><a href="#索引顺序表" class="headerlink" title="索引顺序表"></a>索引顺序表</h3><ol><li>分块，块间有序，块内无序，对应索引表有序，顺序表无序。</li><li>索引顺序表的查找性能在顺序查找和折半查找之间。</li><li>查找过程：<ul><li>先确定待查记录所在块(顺序，折半查找)。</li><li>在块内查找(顺序查找，因为块内无序)</li></ul></li><li>平均查找长度ASL= L<sub>b</sub> + L<sub>w</sub></li><li>既希望较快的查找，又便于线性表动态变化的查找方法是：<strong>索引顺序查找</strong></li><li>例题：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">具有144个记录，采用分块查找。索引和顺序表都采用顺序查找，每块长度为8，则平均查找长度为</span><br><span class="line"></span><br><span class="line">解： ASL = lb + lw</span><br><span class="line">   144/8 = 18块</span><br><span class="line">   lb = (1+2+3+...+18) /18 = 19/2   // 等概率</span><br><span class="line">   lw = (1+2+3+...8)/8 = 9/2</span><br><span class="line">   ASL = 19/2+9/2 = 14</span><br><span class="line">   </span><br><span class="line">   如果索引表折半查找，要计算折半查找平均查找长度 + 顺序表内的顺序查找平均查找长度</span><br></pre></td></tr></table></figure></li></ol><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><ol><li>二叉排序树：空树或这样的一棵树，左子树不空，则左子树所有结点均小于根结点，若右子树不空，则右子树所有结点，均大于根结点。</li><li>若用<strong>中序遍历</strong>二叉排序树得到结果将从小到大有序。</li><li><p>二叉排序树查找算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> # 递归算法查找</span><br><span class="line"> Bitree BstSearch(Bitree bst, int x)&#123;</span><br><span class="line">     if (bst == NULL)&#123;</span><br><span class="line">         rerurn NULL;</span><br><span class="line">     &#125;</span><br><span class="line">     if (bst-&gt;data &gt; x)&#123;  // 如果大于x，说明要查找的值在左子树</span><br><span class="line">         return BstSearch(bst-&gt;lchild, x);</span><br><span class="line">     &#125;else if (bst-&gt;data &lt; x)&#123;</span><br><span class="line">         return BstSearch(bst-&gt;rchild, x);</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">         return bst;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> # 非递归查找</span><br><span class="line">Bitree BstSearch(Bitree bst, int x)&#123;</span><br><span class="line">    p = bst;</span><br><span class="line">    while(p)&#123;</span><br><span class="line">        if (p-&gt;data == x)&#123;</span><br><span class="line">            return p;</span><br><span class="line">        &#125;else if (p-&gt;data &gt;x)&#123;</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二叉排序树插入步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1) 若为空树，直接插入</span><br><span class="line">2) 若非空，首先查找这个元素是否存在，如果存在，什么也不做，如果不存在，则插入到合适位置。(查找不成功的位置，即为插入位置)</span><br><span class="line"></span><br><span class="line">int BST_Insert(Bitree &amp;T, int k)&#123;</span><br><span class="line">    if(T==NULL)&#123;  // 当前为空，说明找到了插入位置，创建新节点进行插入</span><br><span class="line">        T = (Bintree)malloc(sizeof(BNode));</span><br><span class="line">        T-&gt;data = k;</span><br><span class="line">        T-&gt;lchild = T-&gt;rchild = NULL;</span><br><span class="line">        return 1;  // 成功</span><br><span class="line">    &#125;</span><br><span class="line">    else if(k == T-&gt;data)&#123;  // 存在相同关键字</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;else if(k &lt; T-&gt;data)&#123;</span><br><span class="line">        return BST_Insert(T-&gt;lchild, k);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return BST_insert(T-&gt;rchild, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入操作时，新插入的结点总是<strong>叶子结点</strong>。</p></li><li><p>二叉排序树构造就是多次调用插入操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_BST</span><span class="params">(Bitree &amp;T, <span class="keyword">int</span> keys[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    T = <span class="literal">NULL</span>;  <span class="comment">// 创始化</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        BST_Insert(T, keys[i]);  <span class="comment">// 依次插入关键字</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二叉排序树删除步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) 删除叶子结点，直接删除。</span><br><span class="line">2) 删除的结点有左子树或者有右子树(有其中一个)，则子树替代删除结点位置。</span><br><span class="line">3) 删除结点左右子树都存在，则将二叉树按中序遍历，序列的直接后继(直接前驱也行)代替，并删除直接后继(前驱)。</span><br></pre></td></tr></table></figure></li><li><p>计算平均查找长度<code>ASL=(第一层x个数+第二层x个数+第三层x个数+..)/结点总个数</code>。</p></li><li>平均查找长度也为<strong>O(logn)</strong></li><li>如果二叉树插入结点之后为单支树，则查找退化为顺序查找，平均查找长度为 <strong>(1+n)/2</strong></li><li><strong>二叉排序树和二分查找判定树区别</strong>：二分查找判定树唯一，二叉排序树查找不唯一，相同关键字插入顺序不同可能会导致生成不同的二叉排序树。</li></ol><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><ol><li>平衡因子：左子树深度-右子树深度</li><li>平衡二叉树平衡因子只能为<strong>0，1，-1</strong></li><li>平衡二叉树是特殊的<strong>二叉排序树</strong></li><li><p>失去平衡时候调整</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">步骤：</span><br><span class="line">   1) 首先找失去平衡的最小子树</span><br><span class="line">   2) 根据相对判断类型</span><br><span class="line">   3) 调整，按照大小值，谁在中间，谁做根结点。</span><br></pre></td></tr></table></figure></li><li><p>画图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/7832d941dc0fb572b961c0ae7b941f46?method=download&amp;shareKey=43a5d03f061a6899acc799fb32707545&amp;inline=true" alt="image"></p></blockquote></li><li><p>平均查找长度也是<code>(第一层乘个数+第二层乘个数+...)/个数</code></p></li><li>求n个结点的平衡二叉树<strong>最大高度</strong>：即求高度为h的平衡二叉树的<strong>最少结点</strong>。也是非叶子结点，所有平衡因子都为1的情况)</li><li>求<strong>高度为h</strong>的平衡树的<strong>最少结点数</strong>公式：<strong>n<sub>h</sub>= F<sub>h+2</sub>-1</strong>，其中F为斐波拉契数列第h+2项，当F<sub>h</sub>=0，1，2，当h为0，1，2时</li></ol><h3 id="B-树和B-树"><a href="#B-树和B-树" class="headerlink" title="B-树和B+树"></a>B-树和B+树</h3><ol><li>二叉排序树为二路查找，B-树为多路查找。</li><li><p>一棵m阶的B-树，或为空树，或满足：<br>1) 每个结点至多有m个子树(分支)(即最多m-1个关键字)；<br>2) 若根结点，不是叶子结点，则<strong>至少两棵子树(一个关键字)</strong>；<br>3) 除了根，叶子结点之外的结点，至少有<sup>┌</sup>m/2<sup>┐</sup>棵子树；<br>4) 所有叶子结点<strong>在同一层</strong>，不含信息，表示查找失败。<br>5) 具有n个关键字的m阶B树，则有<strong>n+1</strong>个叶结点(查找失败)。</p></li><li><p>B-树的查找</p></li><li><p>B-树的创建(多次插入操作)<br><br>注意：操作时，首先计算每个结点关键字个数，例如：m阶B树，每个结点最多m-1个关键字，根结点最少一个关键字，非根结点的非叶子结点，最少是┌m/2┐-1个关键字，最多m-1个关键字。</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/3f61059409b0af4e787054f1e1e7f6e8?method=download&amp;shareKey=3518e06808f74cec65956dbbec858ef0&amp;inline=true" alt="image"></p></blockquote></li><li><p>B-树的删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 要删除的结点在终端结点(叶子结点)</span><br><span class="line">  1) 要删除的结点内关键字个数＞┌m/2┐-1，此时可以直接删除。(关键字个数大于最小值)</span><br><span class="line">  </span><br><span class="line">  2) 要删除的结点内关键字个数＝最小值┌m/2┐-1，其中左，右兄弟结点中存在关键字个数大于最小值┌m/2┐-1的结点，则从兄弟结点借关键字。然后通过父结点调整。</span><br><span class="line">  </span><br><span class="line">  3) 要删除的结点关键字个数＝最小值┌m/2┐-1，左右兄弟关键字个数等于最小值(不能借)，这时要结点合并，讲剩余结点的关键字与父结点的关键字进行合并，双亲结点下来与孩子合并，双亲结点关键字减1。</span><br><span class="line">  </span><br><span class="line">2. 要删除的结点不终端结点</span><br><span class="line">  1) 如果关键字的左右子树中存在大于┌m/2┐-1结点，则左子树找最右边关键字(删除关键字的前驱)，右子树找最左边关键字(后继关键字)，覆盖要删除的关键字。</span><br><span class="line">   </span><br><span class="line">  2) 如果关键字的左右子树都已经处于最小的关键字个数，则直接合并子结点，删除关键字</span><br></pre></td></tr></table></figure><p>例题：<br></p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/f9ac41f3b088e3a8b31531bf7cfc2d0e?method=download&amp;shareKey=75b142a1b1a23a24e81b9112935f0649&amp;inline=true" alt="image"></p></blockquote></li><li><p>B+树性质概念</p><ol><li>n个关键字有<strong>n个分支</strong>。对比B树，n个关键字，n+1个分支</li><li>B+树的叶子结点<strong>包含信息</strong>。对比B树不包含。</li><li>B+树所有非叶子结点，<strong>只起索引作用</strong>，不包含关键字对应的存储地址。对比B树，每个结点关键字对应存储地址。</li><li>B+树<strong>有一指针</strong>指向最小的叶子结点，<strong>可进行顺序查找</strong>。</li><li>B+树有两种查找运算：一种是从最小关键字开始的顺序查找，另一种是从根节点开始的多路查找。</li></ol></li></ol><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><ol><li>对散列表进行查找的时间复杂度为O(1)，与表中元素个数无关。</li><li>哈希表的平均查找长度与n不直接相关，而是取决于装填因子<code>（α=记录个数/地址空间）</code>和处理冲突方法。</li><li>散列查找思想：计算出散列地址进行查找，然后比较关键字判断是否查找成功。</li><li>为了有效应用Hash表，必须解决的两个问题是<strong>构造Hash函数</strong>和<strong>确定解决冲突的办法</strong></li></ol><h4 id="1-构造散列函数方法"><a href="#1-构造散列函数方法" class="headerlink" title="1. 构造散列函数方法"></a>1. 构造散列函数方法</h4><p>1) 直接定址法</p><blockquote><p>H(key) = a*key +b <br><br>     特点：浪费空间，不会产生冲突</p></blockquote><p>2) 除留取余法</p><blockquote><p>H(key) = key % p  <br><br>     // 假设表长m，其中p为不大于，或等于m的最大素数</p></blockquote><p>3) 数字分析法</p><h4 id="2-处理冲突方法-冲突后，找下一个位置"><a href="#2-处理冲突方法-冲突后，找下一个位置" class="headerlink" title="2. 处理冲突方法(冲突后，找下一个位置)"></a>2. 处理冲突方法(冲突后，找下一个位置)</h4><p>注意：开放定址法，不能随意删除已有元素。</p><p>1) 开放定址法H = (H(key) + d<sub>i</sub>) % m</p><ol><li><p>线性探测再散列</p><blockquote><p>H(key) + 1，H(key)+2，…<br>容易造成“聚集”，从而降低查找效率，聚集是因为解决冲突的方法原则不当。</p></blockquote></li><li><p>二次探测再散列</p><blockquote><p>H(key) + 1^2，H(key) - 1^2，<br>H(key) + 2^2，H(key) - 2^2，…<br>解决聚集问题</p></blockquote></li><li><p>伪随机探测再散列</p><blockquote><p>H(key) + f(1)，H(key) + f(2)，…<br><br>  注意：其中伪随机函数，题中会给</p></blockquote></li></ol><p>2) 链地址法</p><blockquote><p>构造链表，将同一个地址的关键字存储在一个单链表中。</p></blockquote><p>3) 再哈希法</p><h4 id="3-性能分析"><a href="#3-性能分析" class="headerlink" title="3. 性能分析"></a>3. 性能分析</h4><ol><li><p>除留取余+线性再散列例题</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/1ae5f2b1f55398c9c3042d6305d7666c?method=download&amp;shareKey=871831886cdd3046ffaa5008626c10cd&amp;inline=true" alt="image"></p></blockquote></li><li><p>除留取余+链地址法</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/e01a9e91af877fc978fdbcc1584733f4?method=download&amp;shareKey=a2b74604a077f0c6c2bc667e2a395343&amp;inline=true" alt="image"></p></blockquote></li></ol><p>注意：<br></p><ol><li>关于计算平均查找失败长度时，<strong>空位置是否计算在内</strong>：<strong>顺序表</strong>时，空位置的比较次数也<strong>要计算在内</strong>；<strong>链表</strong>(链地址法)时，空指针<strong>不计算在内</strong>。</li><li><strong>计算查找失败平均查找长度</strong>时，如果除留取余法，<strong>分母为p</strong>，分子也应该只计算0-(p-1)的查找次数。</li><li>查找成功是<strong>除以关键字个数</strong>；查找失败<strong>除以模值</strong>。查找失败如果不是除留取余法，则除以散列表空间个数(例如0-15则除以16)。</li><li>采用开放定址法处理散列表冲突时，其平均查找长度是<strong>高于链地址法</strong> 。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;静态查找表：只进行&lt;strong&gt;查找操作&lt;/strong&gt;，例如：顺序查找，折半查找，索引顺序表。&lt;/li&gt;
&lt;li&gt;动态查找表：可进行&lt;strong&gt;查找&lt;/strong&gt;，&lt;strong&gt;插入&lt;/strong&gt;，&lt;strong&gt;删除&lt;/strong&gt;，例如：二叉排序树，平衡二叉树(AVL树)，B树等。&lt;/li&gt;
&lt;li&gt;平均查找长度(ASL)：关键字比较次数的平均值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;顺序查找&quot;&gt;&lt;a href=&quot;#顺序查找&quot; class=&quot;headerlink&quot; title=&quot;顺序查找&quot;&gt;&lt;/a&gt;顺序查找&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;特点：简单，既可以顺序，也可以链式。&lt;/li&gt;
&lt;li&gt;等概率情况下，查找成功的平均查找长度：&lt;strong&gt;ASL=(1+2+3..+n)/n = (1+n)/2&lt;/strong&gt;。(第一次查找成功，比较1次，第二次比较两次成功…)&lt;/li&gt;
&lt;li&gt;顺序查找的判定树为一棵深度为n的单分支的树。&lt;/li&gt;
&lt;li&gt;时间复杂度为O(n)&lt;/li&gt;
&lt;li&gt;代码：
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="查找" scheme="https://fanhang64.github.io/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="平衡二叉树" scheme="https://fanhang64.github.io/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="B-树" scheme="https://fanhang64.github.io/tags/B-%E6%A0%91/"/>
    
      <category term="B+树" scheme="https://fanhang64.github.io/tags/B-%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>图及其应用</title>
    <link href="https://fanhang64.github.io/2021/01/07/%E5%9B%BE%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    <id>https://fanhang64.github.io/2021/01/07/图及其应用/</id>
    <published>2021-01-07T10:09:58.000Z</published>
    <updated>2021-01-28T14:32:59.784Z</updated>
    
    <content type="html"><![CDATA[<ol><li>图由<strong>结点和边</strong>的集合构成。(图不可为空图，树可为空树)</li><li>在无向图中，边(vi,vj)等价于有向图的&lt;vi,vj&gt;与&lt;vj,vi&gt;。</li><li>在<strong>无向图</strong>中，与顶点相关边的条数为<strong>顶点的度</strong>。</li><li>在<strong>有向图</strong>中，指向顶点的度，<strong>由顶点发出的边的条数为</strong>顶点的出度。</li><li>有向完全图：若有向图有n个顶点，则最多有<code>n(n-1)</code>条边[任意两个顶点两条边]。</li><li>无向完全图：有n个顶点，任意两个顶点之间都存在边，最多有<code>n(n-1)/2</code>条边。</li><li>连通：从顶点vi到顶点vj<strong>有路径</strong>，则vi与vj连通。</li><li><strong>连通图</strong>：任意两个顶点之间都连通。</li><li><strong>连通分量</strong>：极大连通子图(极大说的是包含所有边)。</li><li>在有向图中，若顶点vi与vj，从vi到vj，和从vj到vi都有路径，则称图为<strong>强连通图</strong>。</li><li>极大强连通子图称为<strong>强连通分量</strong>。</li><li>顶点为n个的无向连通图<strong>至少有n-1</strong>条边。</li><li>顶点为n个的<strong>有向强连通图</strong>则<strong>至少有n</strong>条边(此时构成环)。</li><li>生成树(极小连通子图)：保持连通，边最少，<strong>不唯一</strong>。</li><li>简单路径：顶点不重复出现的路径。</li><li>无向图的图的度：<strong>边数为无向图所有顶点度的一半</strong>。<a id="more"></a></li></ol><h3 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h3><p>邻接多重表只适用于<strong>无向图</strong>，十字链表适用于<strong>有向图</strong>，其余既可以<strong>无向图和有向图</strong>。</p><ol><li><p>邻接矩阵法</p><ul><li>图的<strong>顺序存储结构</strong>。适用于<strong>稠密图</strong>，邻接矩阵法空间复杂度为<strong>O(n^2)</strong>，与边的数目无关。</li><li>无向图中，矩阵是<strong>对称</strong>的，其中第i行<strong>或</strong>第i列的和为顶点i的<strong>度</strong>，并且唯一。</li><li>有向图中，邻接矩阵<strong>可能为对称</strong>。<strong>第i行</strong>元素和为顶点i的<strong>出度</strong>，<strong>第i列</strong>元素之和为顶点i的<strong>入度</strong>。</li><li><p>结构体定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const int Maxsize = 100 // 最大顶点数</span><br><span class="line">typedef struct Graph&#123;</span><br><span class="line">    VertexType vexs[Maxsize];  // 顶点向量 可以定义为char类型</span><br><span class="line">    ArcType arcs[Maxsize][Maxsize];  // 邻接矩阵 int 类型</span><br><span class="line">    </span><br><span class="line">    int vexnum,arcnum; // 顶点和边的个数</span><br><span class="line">&#125;Graph;</span><br></pre></td></tr></table></figure></li><li><p>对于图(有向，无向)：有边为1，否则为0。</p></li><li>对于网(有向有权图)：有边为权值，否则为∞</li><li><p>画图</p><ul><li><p>对于无向图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/ab95c2833a86d814719c9cfa30583812?method=download&amp;shareKey=db6bba9480b7a9e3689a7a3377448ce6&amp;inline=true" alt="image"></p></blockquote></li><li><p>对于有向图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/3c1a1a945a76c336735018e645cb241f?method=download&amp;shareKey=e6d2fcdc0e044eaccbed1bc5256e24ef&amp;inline=true" alt="image"></p></blockquote></li><li><p>对于网(有向有权图)</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/b4acf31c23919630799621cf36fffd3f?method=download&amp;shareKey=8d59973424972428361072fac2805c85&amp;inline=true" alt="image"></p></blockquote></li></ul></li></ul></li><li><p>邻接表法</p><ul><li>为每个顶点建立一个单链表，第i个结点的表头指针指向关于vi顶点的边表。邻接表法更适用于<strong>稀疏图</strong>。 ，且邻接表画图结果不唯一。</li><li>邻接表由<code>顶点表(顺序存储)</code>和<code>边表(链式存储)</code>组成。</li><li>邻接表占用存储空间与<strong>结点和边都有关</strong>。</li><li><p>结点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">顶点表(链域，数据域)</span><br><span class="line">firstarc data</span><br><span class="line"></span><br><span class="line">边表(邻接点域，链域，数据域)</span><br><span class="line">adjvex  nextarc info</span><br><span class="line"></span><br><span class="line">typedef struct node&#123;  // 边表结点</span><br><span class="line">    int adjvex;  // 该弧所指向的顶点的位置</span><br><span class="line">    struct node *next;</span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"></span><br><span class="line">typedef struct vnode&#123;</span><br><span class="line">    char data;  // 顶点数据</span><br><span class="line">    EdgeNode *first;  // 指向第一条该顶点的弧</span><br><span class="line">&#125;VNode;</span><br></pre></td></tr></table></figure></li><li><p>在无向图中，顶点vi的度为第i结点指向的<strong>边表中结点数</strong>。</p></li><li>在有向图中，边表中结点数只是顶点i的<strong>出度</strong>。要求入度需要遍历整个邻接表。</li><li><p>画法</p><ul><li><p>无向图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/48411a57edabad8de321bb6b1e284a3d?method=download&amp;shareKey=109aa3217ac867d29739bb3006124421&amp;inline=true" alt="image"></p></blockquote></li><li><p>有向图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/d7a725df5eb4247e31436e725da5bd60?method=download&amp;shareKey=0d0ef687b76086eb1132bf9fbb91b2c8&amp;inline=true" alt="image"></p></blockquote></li><li><p>逆邻接表(为了方便确定顶点的入度)</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/07f7a95c9f9eb5d16b45043a4a74a251?method=download&amp;shareKey=bd918b4dff4f9831e956335cf55ca3f8&amp;inline=true" alt="image"></p></blockquote></li></ul></li></ul></li><li><p>十字链表</p><ul><li>十字链表相当于邻接表和逆邻接表结合。</li><li>结点结构<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">顶点结点(结点，指向入边第一个结点，指向出边第一个结点)</span><br><span class="line">data  firstin  firstout</span><br><span class="line"></span><br><span class="line">弧结点(头，尾，指向下一个入边，下一个出边)</span><br><span class="line">start  end  nextin nextout</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>画图<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/e114c169be8a4cba335d737ba41f89af?method=download&amp;shareKey=6fbff16ff753fe6d1adda74f6792cf80&amp;inline=true" alt="image"></p></blockquote></li></ul><ol start="4"><li>邻接多重表<ul><li>适用于无向图，不能存储有向图。</li></ul></li></ol><p>例如：<br>最适合稀疏无向图：邻接多重表。<br>最适合稀疏有向图：十字链表。</p><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><p>无论是深度优先，还是广度优先，时间复杂度<strong>采用邻接表</strong>时都为<strong>O(n+e)</strong>，空间复杂度为<strong>O(n)</strong>，采用<strong>邻接矩阵</strong>时时间复杂度为<strong>O(n^2)</strong>。</p><ol><li><p>深度优先遍历</p><ul><li>类似树的<strong>先根遍历</strong></li><li>同一个图的深度优先遍历<strong>序列可能不同</strong>。</li><li>基本思想：首先访问出发点v，标记为已访问过，然后选取与v相邻的未访问的w，访问，然后选取与w相邻的未访问的顶点，重复。当所有相邻的顶点都访问过，依次退回到最近访问，然后找未访问顶点，重复上述访问操作，直到图中所有顶点访问结束。</li><li><p>可以利用深度优先遍历<strong>判断是否存在回路</strong>。</p></li><li><p>画图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/77f1f5ebd69e3085f4a02357778fc10b?method=download&amp;shareKey=ee635ee44bc8ef792b69d09fc27735cc&amp;inline=true" alt="image"></p></blockquote></li><li><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[max_vertex_num];  <span class="comment">// 标记访问数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span>&#123;</span><br><span class="line">   <span class="comment">// 初始化为false</span></span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)&#123;</span><br><span class="line">       visited[i] = <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//从0号开始遍历，遍历每个连通分量</span></span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)&#123;</span><br><span class="line">       <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">           DFS(G, i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Graph G, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    visit(v);  <span class="comment">// 访问结点v</span></span><br><span class="line">    visited[v] = <span class="literal">true</span>;  <span class="comment">// 将标记数组，标记为已访问</span></span><br><span class="line">    <span class="keyword">for</span>(w=FirstNeighbor(G, v); w&gt;=<span class="number">0</span>; w=NextNeighbor(G, v, w))&#123;  <span class="comment">// w为u的尚未访问的邻接结点</span></span><br><span class="line">        <span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line">            DFS(G, w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>广度优先遍历</p><ul><li>类似<strong>层次遍历</strong>二叉树</li><li>广度优先遍历需要借助一队列。</li><li>广度优先生成树，若给定<strong>邻接矩阵存储</strong>则表示唯一，若给定<strong>邻接表</strong>则表示不唯一。</li><li>画图<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/0f86452a5a2fb1c4a06f0fcb2c37351b?method=download&amp;shareKey=afe9044c9c9d76f9bbc247afe36ca50f&amp;inline=true" alt="image"></p></blockquote></li><li>代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[max_vex_num];  <span class="comment">// 最大顶点个数，用于标记结点是否已被访问</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span></span>&#123; <span class="comment">// 初始化</span></span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)&#123;</span><br><span class="line">      visited[i] = <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   InitQueue(Q);</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)&#123;  <span class="comment">// 从0号顶点开始遍历，且循环目的是对每个连通分量调用一次BFS</span></span><br><span class="line">      <span class="keyword">if</span>(!visited[i])</span><br><span class="line">        BFS(G, i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(Graph G, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">  visit(v);  <span class="comment">// 访问v顶点</span></span><br><span class="line">  visited[v] = <span class="literal">true</span>;</span><br><span class="line">  Enqueue(Q, v); <span class="comment">// 顶点v入队列</span></span><br><span class="line">  <span class="keyword">while</span>(!isEmpty(Q))&#123;</span><br><span class="line">      DeQueue(Q, v);  <span class="comment">// v出队</span></span><br><span class="line">      <span class="keyword">for</span>(w=FirstNeighbor(G, v); w&gt;=<span class="number">0</span>; w=nextNeighbor(G, v,w))&#123;</span><br><span class="line">       <span class="comment">// 获取所有与v邻接的顶点</span></span><br><span class="line">          <span class="keyword">if</span>(!visited[w])&#123;  <span class="comment">// 逐个判断并访问</span></span><br><span class="line">              visit(w);</span><br><span class="line">              visited[w] = <span class="literal">true</span>;</span><br><span class="line">              Enqueue(Q, w);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="最小生成树-MST-带权值-都是针对无向图"><a href="#最小生成树-MST-带权值-都是针对无向图" class="headerlink" title="最小生成树(MST)(带权值)[都是针对无向图]"></a>最小生成树(MST)(带权值)[都是针对无向图]</h3><p>(1) 最小生成树的边数为<strong>顶点数-1</strong>。<br>(2) 最小生成树代价唯一，最小生成树的树形不唯一。</p><ol><li><p>普里姆算法[要求代码]</p><ul><li>从顶点出发每次<strong>选权值最小的边</strong>。</li><li>判断：无向图一定有唯一形态的最小代价生成树。(错)  // 当所有<strong>权值不相同</strong>时，生成的最小生成树才唯一。</li><li>使用<strong>邻接矩阵</strong>存储时，时间复杂度为：O(n^2)</li><li>使用<strong>邻接表</strong>存储时，时间复杂度为：<strong>O(n+e)</strong></li><li>适用于<strong>稠密图</strong>。特点：只与顶点个数n有关，与边的数目e无关。</li><li><p>画图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/56471aec0b4691f8151875b8f669fbf5?method=download&amp;shareKey=bf311ebd3b5fe25df97e69c5d502579f&amp;inline=true" alt="image"></p></blockquote></li><li><p>代码</p></li></ul></li><li><p>克鲁斯卡尔算法</p><ul><li>无需从顶点出发，只需要找权值边最小。</li><li>适用于<strong>稀疏图</strong>。特点：只与边的数目e有关，与定点个数n无关。</li><li><p>画图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/2c99a97b92d87c16a279c799aab035f0?method=download&amp;shareKey=47ae18885976e73f9e54f8f8f2b2ee0f&amp;inline=true" alt="image"></p></blockquote></li><li><p>时间复杂度为：<strong>O(eloge)</strong>  // e为边数</p></li></ul></li></ol><h3 id="拓扑排序-每次删除入度为0的顶点并输出-不要求代码"><a href="#拓扑排序-每次删除入度为0的顶点并输出-不要求代码" class="headerlink" title="拓扑排序(每次删除入度为0的顶点并输出) [不要求代码]"></a>拓扑排序(每次删除入度为0的顶点并输出) [不要求代码]</h3><ol><li>有向无环图(DAG)。AOV网</li><li>拓扑排序结果不一定唯一。</li><li><p>算法思想：</p><ol><li>从DAG中选择一个 <strong>没有前驱结点的结点A(入度为0)</strong> 并输出</li><li>从图中删除所有以A为起点的边</li><li>重复1.2操作直到图为空，或者不存在无前驱顶点为止(存在环)。</li></ol></li><li><p>画图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/96e8f9ff5ab8c93fa05c234b31be9412?method=download&amp;shareKey=3b1bfaa5f87a20311b56bace10c9656d&amp;inline=true" alt="image"></p></blockquote></li></ol><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><ol><li><p>迪杰斯特拉算法[要求代码]</p><ul><li>用于求<strong>某一顶点到其余各顶点的最短路径</strong>。</li><li>迪杰斯特拉适合求解<strong>带回路的有权图的最短路径</strong>，也可以求<strong>任意两个顶点的最短路径</strong>，不适合<strong>求带负权值的最短路径</strong>问题。</li><li><p>画图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/1c701ad30693b8b31c15fd00f9a0d813?method=download&amp;shareKey=f5ecd9c6ee054d4a9875fee6b8138590&amp;inline=true" alt="image"><br>注意：图中的vj为从v0出发到vj的最短路径。再次比较时，用这个到其他顶点距离与原来距离比较。</p></blockquote></li><li><p>代码</p></li></ul></li></ol><ol start="2"><li>弗洛伊德算法<ul><li>用于求<strong>每对顶点直间的最短路径</strong></li><li>时间复杂度为O(n^3)</li><li>画图<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/16f6cbd4ab93789a98f90c4ceee10db2?method=download&amp;shareKey=2b6c1ea4e369fc79de61bf399a387fa5&amp;inline=true" alt="image"></p></blockquote></li></ul></li></ol><h3 id="关键路径-找最长的路径"><a href="#关键路径-找最长的路径" class="headerlink" title="关键路径(找最长的路径)"></a>关键路径(找最长的路径)</h3><ol><li>AOE网，有向无环图。</li><li>边为<strong>活动或任务</strong>。</li><li>顶点为<strong>事件</strong>。</li><li>关键活动：关键路径上活动(边)为关键活动。</li><li>关键路径：从原点到汇点<strong>最大路径长度</strong>的路径称为关键路径。</li><li>事件(顶点)i：最早发生时间<strong>v<sub>e</sub>(vi)</strong>，最晚发生时间<strong>v<sub>l</sub>(vi)</strong>。</li><li>活动(边)：最早开始时间e(ai)，最晚开始时间l(ai)。</li><li><p>画图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/7dca7a9a5f56b5ad970bc3cee5d0f0e0?method=download&amp;shareKey=e9ee395d2b8338b61e6338c6eaa65240&amp;inline=true" alt="image"></p></blockquote></li><li><p>事件最迟发生时间<strong>v<sub>l</sub>(vi)=v<sub>e</sub>(vi)</strong>，或者取min。</p></li><li>网中的关键路径不唯一，只有加快包含所有关键路径上的关键活动才能缩短工期，但也不能随意缩短，关键活动有可能变为非关键活动。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;图由&lt;strong&gt;结点和边&lt;/strong&gt;的集合构成。(图不可为空图，树可为空树)&lt;/li&gt;
&lt;li&gt;在无向图中，边(vi,vj)等价于有向图的&amp;lt;vi,vj&amp;gt;与&amp;lt;vj,vi&amp;gt;。&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;无向图&lt;/strong&gt;中，与顶点相关边的条数为&lt;strong&gt;顶点的度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;有向图&lt;/strong&gt;中，指向顶点的度，&lt;strong&gt;由顶点发出的边的条数为&lt;/strong&gt;顶点的出度。&lt;/li&gt;
&lt;li&gt;有向完全图：若有向图有n个顶点，则最多有&lt;code&gt;n(n-1)&lt;/code&gt;条边[任意两个顶点两条边]。&lt;/li&gt;
&lt;li&gt;无向完全图：有n个顶点，任意两个顶点之间都存在边，最多有&lt;code&gt;n(n-1)/2&lt;/code&gt;条边。&lt;/li&gt;
&lt;li&gt;连通：从顶点vi到顶点vj&lt;strong&gt;有路径&lt;/strong&gt;，则vi与vj连通。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连通图&lt;/strong&gt;：任意两个顶点之间都连通。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连通分量&lt;/strong&gt;：极大连通子图(极大说的是包含所有边)。&lt;/li&gt;
&lt;li&gt;在有向图中，若顶点vi与vj，从vi到vj，和从vj到vi都有路径，则称图为&lt;strong&gt;强连通图&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;极大强连通子图称为&lt;strong&gt;强连通分量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;顶点为n个的无向连通图&lt;strong&gt;至少有n-1&lt;/strong&gt;条边。&lt;/li&gt;
&lt;li&gt;顶点为n个的&lt;strong&gt;有向强连通图&lt;/strong&gt;则&lt;strong&gt;至少有n&lt;/strong&gt;条边(此时构成环)。&lt;/li&gt;
&lt;li&gt;生成树(极小连通子图)：保持连通，边最少，&lt;strong&gt;不唯一&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;简单路径：顶点不重复出现的路径。&lt;/li&gt;
&lt;li&gt;无向图的图的度：&lt;strong&gt;边数为无向图所有顶点度的一半&lt;/strong&gt;。
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图" scheme="https://fanhang64.github.io/tags/%E5%9B%BE/"/>
    
      <category term="图的遍历" scheme="https://fanhang64.github.io/tags/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    
      <category term="图的应用" scheme="https://fanhang64.github.io/tags/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>树和二叉树总结</title>
    <link href="https://fanhang64.github.io/2021/01/07/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E6%80%BB%E7%BB%93/"/>
    <id>https://fanhang64.github.io/2021/01/07/树和二叉树总结/</id>
    <published>2021-01-07T10:08:15.000Z</published>
    <updated>2021-01-28T14:32:42.564Z</updated>
    
    <content type="html"><![CDATA[<ol><li>树型结构是非线性数据结构。</li><li>结点的度：结点拥有的分支个数，<strong>节点度</strong>就是这个节点的<strong>孩子数量</strong> 。</li><li>树的度：树中结点度的最大值。</li><li>树的高度：树中结点的最大层数。</li><li>结点的深度：根结点到该结点路径结点个数。<h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3></li><li>顺序存储：双亲表示法</li><li>链式存储：孩子表示法和孩子兄弟表示法</li><li><strong>双亲表示法</strong>用于<strong>找双亲效率高</strong>；孩子表示法和孩子兄弟表示法找孩子效率高，找双亲效率低。</li><li>度为m的总结点数：<code>n0+n1+n2+n3+...+nm</code></li><li>总分支数：<code>1*n1+2*n2+3*n3+4*n4+...+m*nm</code></li><li>总分支数=总结点数-1<a id="more"></a></li></ol><h3 id="二叉树-子树有左右之分，不能任意颠倒"><a href="#二叉树-子树有左右之分，不能任意颠倒" class="headerlink" title="二叉树(子树有左右之分，不能任意颠倒)"></a>二叉树(子树有左右之分，不能任意颠倒)</h3><ol><li>在二叉树第i层最多有2^(i-1)个结点。</li><li>深度为k的二叉树最多有(2^k)-1个结点。</li><li>对于任何一棵二叉树，如果叶结点为n0则度为2的结点数为n2，则<code>n0=n2+1</code>。</li><li>满二叉树和完全二叉树(除最后一层不满，其余层都是满的)。</li><li>具有n个结点的<strong>完全二叉树</strong>的深度为h＝<sub>└</sub>log<sub>2</sub>n<sub>┘</sub>+1。</li><li>n个结点的完全二叉树，结点按层次从1编号有：<ul><li>结点i的双亲为<sub>└</sub>i/2<sub>┘</sub>,若i＝1时无根。</li><li>i结点的左孩子是2i</li><li>i结点的右孩子是2i+1</li><li>结点为i所在的层为<sub>└</sub>log<sub>2</sub>i<sub>┘</sub>+1</li></ul></li><li>n个叶子结点完全二叉树深度<code>└log2(2n)┘+1</code></li></ol><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><p>结构定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode,*BinTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三叉链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>,*<span class="title">parent</span>;</span></span><br><span class="line">&#125;BTNode,*BinTree;</span><br></pre></td></tr></table></figure></p><ol><li>顺序存储：自上而下，自左而右的存储在一维数组，仅适合存储<strong>完全二叉树</strong>，第i号元素存储在一位数组下标的<code>[i-1]</code>位置。</li><li>链式存储：二叉链表和三叉链表<ul><li>二叉链表：lchild + data + rchild</li><li>三叉链表： lchild + data + parent + rchild </li></ul></li><li>二叉链表含有n个结点，有n+1个空指针。<blockquote><p>2叉链表，n个结点，共2n个指针域，除了第一个结点，每个结点都有父结点，父结点指向子结点，故n-1个结点存放了地址，有2n-(n-1)=n+1个为空指针。</p></blockquote></li><li>采用三叉链表有n个结点，有n+2个空指针。</li><li>五种二叉树形态<ul><li>空树：bt == NULL</li><li>左右子树均为空： bt-&gt;lchild ==NULL &amp;&amp; bt-&gt;rchild ==NULL</li><li>右子树为空：bt-&gt;rchild == NULL</li><li>左子树为空：bt-&gt;lchild == NULL</li><li>左右子树均非空</li></ul></li><li>n个结点可以构造多少种二叉树?<blockquote><p>公式：1/(1+n)Cn.2n</p></blockquote><h3 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h3></li><li>每个结点仅被访问一次</li><li>先序遍历，中序遍历，后序遍历只有根结点访问的先后顺序有区别，其他(例如：两个结点的先后顺序，三种方法完全相同)没区别。</li><li><p>算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Preorder</span><span class="params">(BTnode *bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bt)&#123;</span><br><span class="line">        visit(bt-&gt;data);</span><br><span class="line">        Preorder(bt-&gt;lchild);</span><br><span class="line">        Preorder(bt-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BTNode *bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bt)&#123;</span><br><span class="line">        InOrder(bt-&gt;lchild);</span><br><span class="line">        visit(bt-&gt;data);  <span class="comment">// 移动到下面为后序遍历</span></span><br><span class="line">        InOrder(bt-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层次遍历</span></span><br><span class="line"><span class="comment">// 思路：利用一个队列，首先将根(头指针)入队列，以后若队列不空则取队头元素p，</span></span><br><span class="line"><span class="comment">// 若p不空则访问，然后将其左右子树入队列，如此循环直到队列为空。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(BinTree bt)</span></span>&#123;</span><br><span class="line">    initEqueue(Q);  <span class="comment">// Q为队列</span></span><br><span class="line">    Enqueue(Q, bt);  <span class="comment">// 根结点入队</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!QueueEmpty(Q))&#123;</span><br><span class="line">        DeQueue(Q, p);</span><br><span class="line">        <span class="keyword">if</span> (p)&#123;</span><br><span class="line">            visit(p);</span><br><span class="line">            Enqueue(p-&gt;lchild);</span><br><span class="line">            Enqueue(p-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用循环队列的层次遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(Bintree *bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> Maxsize = <span class="number">1024</span>;</span><br><span class="line">    Bintree q[maxsize];  <span class="comment">// 等同 BTNode * q[maxsize]</span></span><br><span class="line">    <span class="keyword">int</span> front, rear;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化队列</span></span><br><span class="line">    front = rear = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 根入队列</span></span><br><span class="line">    q[rear] = bt;</span><br><span class="line">    rear = (rear +<span class="number">1</span>)% maxsize;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 队列不空时循环</span></span><br><span class="line">    <span class="keyword">while</span>(!front == rear)&#123;</span><br><span class="line">        p = q[front];</span><br><span class="line">        front = (front +<span class="number">1</span>) %maxsize;</span><br><span class="line">        <span class="keyword">if</span> (p)&#123;</span><br><span class="line">            visit(p-&gt;data);</span><br><span class="line">            q[rear] = p-&gt;lchild;</span><br><span class="line">            rear = (rear +<span class="number">1</span>)%maxsize;</span><br><span class="line">            q[rear] =p-&gt;rchild;</span><br><span class="line">            rear = (rear +<span class="number">1</span>)%maxsize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归中序遍历</span></span><br><span class="line">思路：指针p从根开始，首先沿着左子树向下移动，同时入栈保存路径结点(不访问)，当到达空子树后需要退栈访问结点，然后移动到右子树。</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(Bintree bt)</span></span>&#123;</span><br><span class="line">    InitStack(S);</span><br><span class="line">    p = bt;</span><br><span class="line">    <span class="keyword">while</span>(p || !StackEmpty(S))&#123;</span><br><span class="line">        <span class="keyword">if</span> (p)&#123;</span><br><span class="line">            Push(S, p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Pop(S, p);</span><br><span class="line">            visit(p);</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序非递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BtTree bt)</span></span>&#123;</span><br><span class="line">    initStack(S);</span><br><span class="line">    p = bt;</span><br><span class="line">    <span class="keyword">while</span> (p || !StackEmpty(S))&#123;</span><br><span class="line">        <span class="keyword">if</span> (p)&#123;</span><br><span class="line">            visit(p-&gt;data);</span><br><span class="line">            Push(S, p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            pop(S, p);</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历非递归</span></span><br><span class="line"><span class="comment">// 思路：分别从左子树和右子树两次返回根结点，只有从右子树返回时才访问根结点，增加一个栈标记到达结点的次序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(Bintree bt)</span></span>&#123;</span><br><span class="line">    InitStack(S);</span><br><span class="line">    InitStack(tag);</span><br><span class="line">    p = bt;</span><br><span class="line">    <span class="keyword">while</span>(p || !StackEmpty(S))&#123;</span><br><span class="line">        <span class="keyword">if</span> (p)&#123;</span><br><span class="line">            push(S, p)</span><br><span class="line">            Push(tag, <span class="number">1</span>)  <span class="comment">// 第一次入栈标识</span></span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 从左子树返回，二次入栈，然后p转右子树</span></span><br><span class="line">            Pop(S, p);</span><br><span class="line">            Pop(tag, f);</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="number">1</span>)&#123;</span><br><span class="line">               Push(S, p);</span><br><span class="line">               Push(tag, <span class="number">2</span>);</span><br><span class="line">               p = p-&gt;rchild;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 从右子树返回，访问p，转上层</span></span><br><span class="line">                visit(p);</span><br><span class="line">                p = <span class="literal">NULL</span>; <span class="comment">// 使下一步继续退栈</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三叉链表的中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(Bintree bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bt == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// 空树直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    p = bt;</span><br><span class="line">    <span class="keyword">while</span>(p -&gt;lchild) </span><br><span class="line">        p = p-&gt;lchild;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        visit(p);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;rchild)&#123;</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>非空二叉树<strong>先序遍历和后序遍历具有相同的结点访问顺序</strong>，则一定<strong>只有根结点</strong>。</p></li><li>若非空二叉树<strong>先序遍历和后序遍历访问顺序相反</strong>，则<strong>二叉树所有结点无左孩子或无右孩子(向右斜线，或向左斜线)</strong>。</li></ol><h3 id="遍历二叉树应用"><a href="#遍历二叉树应用" class="headerlink" title="遍历二叉树应用"></a>遍历二叉树应用</h3><p>题型：给出前，中，后序其中两个确定一棵二叉树。<br>a. 已知前序和中序，可以唯一确定二叉树。<br>   例如： </p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/f9b02a0b9ba0e458c7b2a055d88483d3?method=download&amp;shareKey=bfce63c71deb940ae92e8f37e87c7cca&amp;inline=true" alt="image"></p></blockquote><p>b. 已知后序和中序，可以唯一确定二叉树。<br>   例如：</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/7c037a8c962abf301d2fd0dfaf05fcad?method=download&amp;shareKey=f2daf7aa290911bd389b15818f3cd227&amp;inline=true" alt="image"></p></blockquote><p>c. 已知前序和后序，不一定能确定。<br>   虽然前序后序不能确定唯一二叉树，但可确定父子关系，例如：若前序为XY，后序为YX，则X为Y的父结点。</p><p>d. 算法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求二叉树结点的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NodeCount</span><span class="params">(Bintree bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+ NodeCount(bt-&gt;lchild) +NodeCount(bt-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求二叉树的深度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(Bintree bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+ max(Depth(p-&gt;lchild), Depth(p-&gt;rchild));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求二叉树叶子结点的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LeafCount</span><span class="params">(Bintree bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(bt-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; bt-&gt;rchild ==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> LeafCount(bt-&gt;lchild) + LeafCount(bt-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><p>引入二叉线索树目的是<strong>加快查找结点的前驱和后继</strong>。</p><ol><li><p>结点结构(5部分)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lchild ltag data rtag rchild</span><br><span class="line"></span><br><span class="line">其中：ltag, rtag为标识位，当tag=0时表示child指针指向结点，</span><br><span class="line">当tag=1时，则表示child指针为线索，指向结点的前驱或者后继</span><br></pre></td></tr></table></figure></li><li><p>线索化<br>左边空指针可以作为前驱索引，右边空指针可以作为后继线索，可以<code>全线索化(例如面的，先序和中序)，也可以部分线索化(例如：下面的后序)</code>。</p><ul><li>先序线索化<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/7e392b0b96583760e9617839620fb047?method=download&amp;shareKey=0fa625d9cabc9e218eb97e94c5d271b7&amp;inline=true" alt="image"></p></blockquote></li><li>中序线索化<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/08df272071b2fb32c34c7d4598142429?method=download&amp;shareKey=b0ef8c40d43d6687d966c2ccd4ff6dd3&amp;inline=true" alt="image"></p></blockquote></li><li>后序线索化(只画出后序的后继线索)<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/644ae078b761f8592c3c206bc0b328d7?method=download&amp;shareKey=44910cf629d9c8cf828314373b1468fc&amp;inline=true" alt="image"></p></blockquote></li></ul></li><li><p>中序线索化代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中序非递归遍历线索树</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> PointerTag&#123;Link, Thread&#125;;  <span class="comment">// Link=0 指针，Thread =1 线索</span></span><br><span class="line">   </span><br><span class="line"> <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span>&#123;</span></span><br><span class="line">     EmemType data;</span><br><span class="line"> </span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">     PointerTag Ltag, Rtag;  <span class="comment">// 左右标志，为0时表示lchild指向左孩子，为1时表示指向前驱</span></span><br><span class="line"> &#125;BiThrNode, *BiThrTree;</span><br><span class="line">   </span><br><span class="line"> <span class="comment">// 线索化，在线索链表添加一个头结点，头结点的lchild指向，原来的根结点，头结点的rchild指向原来线索链表中序遍历的的最后一个节点</span></span><br><span class="line"> <span class="comment">// ，同时中序遍历的第一个节点的lchild和最后一个节点的rchild指向头结点。</span></span><br><span class="line"> <span class="function">Status <span class="title">InorderTraverse_Thr</span><span class="params">(BiThrTree T)</span></span>&#123;</span><br><span class="line">     <span class="comment">// 这里T指向一个头结点，头结点的lchild指向根结点</span></span><br><span class="line">     BithrTree p;</span><br><span class="line"> </span><br><span class="line">     p = T-&gt;lchild;  <span class="comment">// p指向根结点，</span></span><br><span class="line"> </span><br><span class="line">     <span class="keyword">while</span>(p != T)&#123;  <span class="comment">// 空树或者遍历结束时候p == T，此时p指向头结点</span></span><br><span class="line">         <span class="keyword">while</span>(p-&gt;Ltag == link)&#123;p=p-&gt;lchild;&#125;</span><br><span class="line">     </span><br><span class="line">         <span class="built_in">printf</span>(p-&gt;data);  <span class="comment">// 访问左子树为空的节点</span></span><br><span class="line">     </span><br><span class="line">         <span class="keyword">while</span>(p-&gt;Rtag == Thread &amp;&amp; p-&gt;rchild != T)&#123;</span><br><span class="line">             p=p-&gt;rchild;</span><br><span class="line">         </span><br><span class="line">             <span class="built_in">printf</span>(p-&gt;data);  <span class="comment">//访问后继节点</span></span><br><span class="line">         &#125;</span><br><span class="line">         p = p-&gt;rchild;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>后序线索树</strong>需要栈的支持。</p></li><li>二叉树线索化后，仍不能有效求解的问题是<code>后序线索二叉树中求后序后继</code>。(原因：先序遍历（中左右）、中序遍历（左中右）的最后访问的节点都是左或右叶节点，叶节点是没有子树的，所以两个指针域空出来了，可以存放线索指针。但是后续遍历（左右中），最后访问的是子树的根节点，而子树根节点的两个指针域都指向子树了，所以不能空出来存放线索信息。)</li></ol><h3 id="树的存储结构-1"><a href="#树的存储结构-1" class="headerlink" title="树的存储结构"></a>树的存储结构</h3><ol><li>双亲表示法<br>1) 存储表示   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span>&#123;</span>  <span class="comment">//  结点结构</span></span><br><span class="line">   ElemType data;</span><br><span class="line">   <span class="keyword">int</span> parent;  <span class="comment">// 双亲位置(数组下标)</span></span><br><span class="line">&#125;PTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    PTNode nodes[max_tree_size];</span><br><span class="line">    <span class="keyword">int</span> r, n;  <span class="comment">// 根位置和结点数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   2) 画图<br>      &gt; <img src="https://note.youdao.com/yws/api/personal/file/057aa7a34b72e4efa3d75c15040aeded?method=download&amp;shareKey=ebb786e2703dd646ce628885274e2751&amp;inline=true" alt="image"></p><ol start="2"><li><p>孩子表示法<br>1) 存储表示</p>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>&#123;</span>  <span class="comment">// 孩子结点，孩子链表的结点</span></span><br><span class="line">    <span class="keyword">int</span> child; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;* ChildPtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    ChildPtr firstchild;  孩子链表的头指针</span><br><span class="line">&#125;CTBox;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    CTBox nodes[size];</span><br><span class="line">    <span class="keyword">int</span> r, n;  <span class="comment">// 根的位置和结点数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>孩子兄弟表示法<br>1) 存储表示</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct CSNode&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    struct CSNode * firstchild, *nextsibling;</span><br><span class="line">&#125;CSNode, *CSTree;</span><br></pre></td></tr></table></figure><p>2) 画图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/882b5cc131da67a3d26061fc9ac08246?method=download&amp;shareKey=04ca146e9504c78237f7034747b6dd47&amp;inline=true" alt="image"></p></blockquote></li></ol><h3 id="树与二叉树的转换"><a href="#树与二叉树的转换" class="headerlink" title="树与二叉树的转换"></a>树与二叉树的转换</h3><p>特点： 由树转化为二叉树，根结点无右孩子。<br>题型：画图将树转为二叉树，并将二叉树转树。</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/42d1c7401ced419c474718fd5c3de7eb?method=download&amp;shareKey=bc22dede75c619038f414a9149f26ea4&amp;inline=true" alt="image"></p></blockquote><h3 id="森林和二叉树的转换"><a href="#森林和二叉树的转换" class="headerlink" title="森林和二叉树的转换"></a>森林和二叉树的转换</h3><p>题型：森林和二叉树相互转换</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/83893627e2f32455325b42cf107e230d?method=download&amp;shareKey=f661644d99ddf710d971c751aff1d187&amp;inline=true" alt="image"></p></blockquote><h3 id="树和森林的遍历"><a href="#树和森林的遍历" class="headerlink" title="树和森林的遍历"></a>树和森林的遍历</h3><ol><li>树的先根遍历对应二叉树的<code>先序遍历</code>；树的后根遍历对应二叉树的<code>中序遍历</code>。</li><li>森林的先序遍历对应二叉树的<code>先序遍历</code>，森林的中序遍历对应二叉树的<code>中序遍历</code>。</li></ol><h3 id="赫夫曼树-最优二叉树-和赫夫曼编码"><a href="#赫夫曼树-最优二叉树-和赫夫曼编码" class="headerlink" title="赫夫曼树(最优二叉树)和赫夫曼编码"></a>赫夫曼树(最优二叉树)和赫夫曼编码</h3><p>特点：带权路径最短。</p><ol><li>路径：是树从一个结点到另一个结点的</li><li>树的带权路径长度：所有<strong>叶子结点的带权路径长度之和</strong>，记作WPL。</li><li>性质：<ul><li>每个初始结点都为叶结点。</li><li>权值越大离根结点越近，权值越小离根结点越远。</li><li>哈夫曼树没有度为1的结点。</li><li>n个叶子结点的哈夫曼树，结点总数为<code>2n-1</code>，其中度为2的结点个数为<code>n-1</code>。</li></ul></li><li>构造赫夫曼树(每次取两个最小的树组成二叉树)<br>注意：同样一组权值可能构造不同的霍夫曼树，但是带权路径长度一定是一样的。<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/cd0465e46960b2484bf69bc47fae1a2f?method=download&amp;shareKey=f16cd163013521a247d02dc525910bb2&amp;inline=true" alt="image"></p></blockquote></li><li>霍夫曼编码(前缀码)<br>左分支为0，右分支为1，从根到叶子的路径构成叶子的前缀编码。<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/83842669d04408584dc9ec4151ef542f?method=download&amp;shareKey=af8fe240f178bf27b062d3ec7b6eb649&amp;inline=true" alt="image"></p></blockquote></li><li>赫夫曼n叉树<ul><li>若构造n叉树时，发现结点不能构造时，需要补上权值为0的结点，让序列构成霍夫曼叉树序列。</li><li>此时只有度为0和度为n的结点</li></ul></li><li><p>判断字符是不是前缀编码?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">只需要判断是否有其他编码以这个编码开头。</span><br><span class="line">A. 01 0000 0001 001 1</span><br><span class="line">D. 0 100 110 1110 1100</span><br><span class="line"></span><br><span class="line">看A 的01 比较0000 0001 001 1都不是01开头</span><br><span class="line">看A 的0000 比较，不存在</span><br><span class="line">其他相同，比较完发现A是前缀编码。</span><br><span class="line"></span><br><span class="line">看D 比较后发现110 是1100的开头。故D不为前缀编码</span><br></pre></td></tr></table></figure></li><li><p>一棵哈夫曼树215个结点，对其进行编码，共得到多少个码字?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n0+n2 =215</span><br><span class="line">n0 = n2 + 1</span><br><span class="line">带去可得n0 = 108</span><br></pre></td></tr></table></figure></li><li><p>只有叶子结点有关键字值，<strong>非叶结点无关键字值</strong>。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;树型结构是非线性数据结构。&lt;/li&gt;
&lt;li&gt;结点的度：结点拥有的分支个数，&lt;strong&gt;节点度&lt;/strong&gt;就是这个节点的&lt;strong&gt;孩子数量&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;树的度：树中结点度的最大值。&lt;/li&gt;
&lt;li&gt;树的高度：树中结点的最大层数。&lt;/li&gt;
&lt;li&gt;结点的深度：根结点到该结点路径结点个数。&lt;h3 id=&quot;树的存储结构&quot;&gt;&lt;a href=&quot;#树的存储结构&quot; class=&quot;headerlink&quot; title=&quot;树的存储结构&quot;&gt;&lt;/a&gt;树的存储结构&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;顺序存储：双亲表示法&lt;/li&gt;
&lt;li&gt;链式存储：孩子表示法和孩子兄弟表示法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双亲表示法&lt;/strong&gt;用于&lt;strong&gt;找双亲效率高&lt;/strong&gt;；孩子表示法和孩子兄弟表示法找孩子效率高，找双亲效率低。&lt;/li&gt;
&lt;li&gt;度为m的总结点数：&lt;code&gt;n0+n1+n2+n3+...+nm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;总分支数：&lt;code&gt;1*n1+2*n2+3*n3+4*n4+...+m*nm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;总分支数=总结点数-1
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="https://fanhang64.github.io/tags/%E6%A0%91/"/>
    
      <category term="二叉树" scheme="https://fanhang64.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="遍历二叉树" scheme="https://fanhang64.github.io/tags/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="线索二叉树" scheme="https://fanhang64.github.io/tags/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="霍夫曼树" scheme="https://fanhang64.github.io/tags/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数组和广义表</title>
    <link href="https://fanhang64.github.io/2021/01/07/%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/"/>
    <id>https://fanhang64.github.io/2021/01/07/数组和广义表/</id>
    <published>2021-01-07T10:06:02.000Z</published>
    <updated>2021-01-28T14:32:12.440Z</updated>
    
    <content type="html"><![CDATA[<ol><li>数组是一组<strong>类型相同</strong>，下标不同的变量构成，是<strong>逻辑结构</strong>。</li><li>数组特点：元素有统一的类型，下标有固定上界和下界，数组一旦被定义，它的纬数和维界就不在改变。</li><li>数组除了初始化和销毁外，只能<strong>修改，存取</strong>两个操作。</li><li>特殊矩阵：对称矩阵，三角阵，对角阵。</li><li>对称矩阵主对角线上下对阵，只需要保存一份。</li><li>稀疏矩阵：顺序存储+链式存储。</li><li>顺序存储：三元组表示法<a id="more"></a><ul><li>三元组转置<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/7de03d6dcd095bd0a5870000d1d0323a?method=download&amp;shareKey=5423c1be20bb88069c075003e5cdea33&amp;inline=true" alt="image"></p></blockquote></li><li>快速转置<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/3596ad5a0511c66e66765ae4f700d542?method=download&amp;shareKey=f9956b92763f328e35923079f25b1e66&amp;inline=true" alt="image"><br>cpot表示，M(转置前)中第col列的第一个非零元素在b.data中位置。</p></blockquote></li></ul></li></ol><ol start="8"><li>链式存储：十字链表画图<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/082c136c4fd539669a50a43e8e3e3ecb?method=download&amp;shareKey=f395d68ba63ffbc2a80f49bf901575ea&amp;inline=true" alt="image"></p></blockquote></li><li>广义表：元素可以是<strong>原子或者广义表</strong>的一种线性结构。</li><li>广义表的长度：最上层元素的个数。</li><li>广义表的深度：括号的最大层数。</li><li>表头(HEAD)和表尾(Tail)：广义表非空时，第一个元素为广义表的表头，其余元素组成的<strong>表</strong>为广义表的表尾。</li><li><p>广义表的题型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A = ()  # A是空表，长度为0，深度为1</span><br><span class="line">B = (d, e) # B的元素都为原子，长度为2，深度为1</span><br><span class="line">C = (b, (c,d))  # C的元素为原子b和另一个广义表(c,d),长度为2，深度为2</span><br><span class="line">D = (B,C)  # 元素为两个广义表，长度为2，深度为3</span><br><span class="line">E = (a,E)  # 元素为原子，和他本身，长度为2，深度为无限</span><br><span class="line"></span><br><span class="line"># Head和Tail的求法例子</span><br><span class="line">Head(B) = d    Tail(B) = (e)  </span><br><span class="line">Head(D) = B    Tail(D) = (C)</span><br><span class="line">Head((a)) = (a) </span><br><span class="line">Tail((a)) = ()</span><br><span class="line">Head(A)与Tail(A)  # 无定义</span><br><span class="line">Head(()) = ()  Tail(()) = ()</span><br><span class="line"></span><br><span class="line">注意：取Tail() = (内容)，先加一层括号，</span><br></pre></td></tr></table></figure></li><li><p>任何非空广义表的表头可以为原子和子表，但表尾只能是子表。例如：Tail(B) = (e)</p></li><li>广义表的存储结构：链式存储</li><li>头尾链表存储结构作图<br>两种结点结构：<ol><li>原子结点[tag=0,数据域]；</li><li>子表结点[tag=1,指向表头指针,指向表尾指针]<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/69d0b84bb671aa1521255393968afe5a?method=download&amp;shareKey=31d1c976d30b0659325e8178b53aeb4d&amp;inline=true" alt="image"></p></blockquote></li></ol></li><li>扩展线性表存储结构作图<br>两种结点结构：<ol><li>原子结点：[标记域，数据域，尾指针域]</li><li>广义表结点：[标记域，表头指针域，表尾指针域]</li><li>注意：相当于带结点的链表，第一个为头节点，然后头结点的表头域指向下一层，第一层长度是几，建立几个节点，横向链接，然后建立第二层的节点，类推。<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/18abb20ddd9d98c08d64e6f9a3df682e?method=download&amp;shareKey=72d94320243d8aba676418e2944a656e&amp;inline=true" alt="image"></p></blockquote></li></ol></li><li>稀疏矩阵的压缩存储后便<strong>失去随机存取</strong>的特性。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;数组是一组&lt;strong&gt;类型相同&lt;/strong&gt;，下标不同的变量构成，是&lt;strong&gt;逻辑结构&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;数组特点：元素有统一的类型，下标有固定上界和下界，数组一旦被定义，它的纬数和维界就不在改变。&lt;/li&gt;
&lt;li&gt;数组除了初始化和销毁外，只能&lt;strong&gt;修改，存取&lt;/strong&gt;两个操作。&lt;/li&gt;
&lt;li&gt;特殊矩阵：对称矩阵，三角阵，对角阵。&lt;/li&gt;
&lt;li&gt;对称矩阵主对角线上下对阵，只需要保存一份。&lt;/li&gt;
&lt;li&gt;稀疏矩阵：顺序存储+链式存储。&lt;/li&gt;
&lt;li&gt;顺序存储：三元组表示法
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="https://fanhang64.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="广义表" scheme="https://fanhang64.github.io/tags/%E5%B9%BF%E4%B9%89%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>串总结</title>
    <link href="https://fanhang64.github.io/2021/01/07/%E4%B8%B2%E6%80%BB%E7%BB%93/"/>
    <id>https://fanhang64.github.io/2021/01/07/串总结/</id>
    <published>2021-01-07T10:03:38.000Z</published>
    <updated>2021-01-28T14:31:16.265Z</updated>
    
    <content type="html"><![CDATA[<ol><li>串是逻辑结构，是限定元素为字符的线性表，用单引号括起来的字符序列是串的值。</li><li>空串：零个字符的串，长度为0。</li><li>空格串：由空格组成的串。</li><li>子串：串中的任意<strong>连续</strong>的<strong>子序列</strong>。</li><li>子串在主串中位置：子串中第一个字符在主串中位置(从1开始)。</li><li>主串：包含子串的串。</li><li>串相等：长度相等，对应字符相等。</li><li>模式匹配是串的一种重要操作。(模式匹配就是找子串的位置)</li><li><p>串的存储结构：①定长顺序串;②堆分配存储;③块链存储</p><a id="more"></a></li><li><p>基本操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">assign(s,t)  // 将t赋值给s</span><br><span class="line">create(s,cs)  // 讲cs字符创建为字符串</span><br><span class="line">Equal(s,t)   // 判断s与t是否相等</span><br><span class="line">Length(s)    // 求s的长度</span><br><span class="line">Concat(s,t)  // 串连接，返回连接后新串。例如：concat(&quot;ab&quot;, &quot;cd&quot;) = &quot;abcd&quot;</span><br><span class="line">Substr(s,pos,len)  // 从pos位置开始取len长度的子串。pos从1开始取，且包含pos位置</span><br><span class="line">Index(s,t)  // 求子串t在中位置，查找失败时候返回0。例如Index(&quot;abc&quot;,&quot;ab&quot;)=1</span><br><span class="line">replace(s,t,v)  // 将s中的t字符串用v替代。例如replace(&quot;abc&quot;,&quot;ab&quot;, &quot;d&quot;)=&quot;dc&quot;</span><br><span class="line">subcompare(s, t)  // 比较字符串大小。若s＞t，返回值＞0;s小于t时，返回值小于0;s=t时，返回值=0</span><br></pre></td></tr></table></figure></li><li><p>模式匹配算法</p></li></ol><ul><li><p>简单模式匹配</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 简单模式匹配</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">index</span><span class="params">(String s, String t)</span></span>&#123;</span><br><span class="line">    i = <span class="number">1</span>; j = <span class="number">1</span>;  <span class="comment">// 字符串从数组下标1开始存储</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;s[<span class="number">0</span>] &amp;&amp; j &lt;= t[<span class="number">0</span>])&#123;  <span class="comment">// 其中下标为0存储字符串的长度</span></span><br><span class="line">        <span class="keyword">if</span>(s[i] == t[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            i = i -j +<span class="number">2</span>;  <span class="comment">// 例如abdc与abc模式匹配，当i =3,j =3时，匹配失败，i回退到b的位置即3-3+2是b的下标</span></span><br><span class="line">            j = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j &gt; T[<span class="number">0</span>])<span class="keyword">return</span> i - T[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>kmp算法</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># kmp算法手算</span></span><br><span class="line"></span><br><span class="line">前缀：例如'ababa'的前缀(除去最后一个字符) ：&#123;a,ab,aba,abab&#125;</span><br><span class="line">后缀：例如上式的后缀(除去第一个字符)：&#123;a,ba,aba,baba&#125;</span><br><span class="line"></span><br><span class="line">例如：求模式串T=<span class="string">"abababcabc"</span>的next数组值。</span><br><span class="line">步骤：</span><br><span class="line"><span class="number">1</span>) 找除去第j位的前面几位的前缀和后缀。例如当j为<span class="number">3</span>时对应字符为a，找ab的前缀和后缀最大相同长度</span><br><span class="line"><span class="number">2</span>) 找最长的前缀和后缀相等。</span><br><span class="line"><span class="number">3</span>) 将最长相等数+<span class="number">1</span>。</span><br><span class="line">本题：</span><br><span class="line">① 第一位默认为<span class="number">0</span>。(j等于<span class="number">1</span>时)</span><br><span class="line">② 第二位为默认为<span class="number">0</span>+<span class="number">1</span>为<span class="number">1</span></span><br><span class="line">③ 第三位为ab的最大前缀和后缀中相同，前缀为&#123;a&#125;，后缀为&#123;b&#125;即最大相同为<span class="number">0</span>，则next值为<span class="number">0</span>+<span class="number">1</span>为<span class="number">1</span></span><br><span class="line">④ 第四位找aba的最大前缀和后缀相同，前缀为&#123;a,ab&#125;,后缀为&#123;a, ba&#125;即最大相同长度为<span class="number">1</span>，则next值为<span class="number">1</span>+<span class="number">1</span>=<span class="number">2</span></span><br><span class="line">⑤ 全部结果<span class="number">0112345123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">时间复杂度为O(m+n)  <span class="comment">//模式串m，正文串n</span></span><br></pre></td></tr></table></figure></li><li><p>kmp算法改进</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># kmp算法改进</span></span><br><span class="line">例如：已知模式串为T=<span class="string">"abababcabc"</span>,则nextva函数值。</span><br><span class="line"></span><br><span class="line">步骤：</span><br><span class="line"><span class="number">1</span>) 写出next数组</span><br><span class="line"><span class="number">2</span>) 写nextval数组，当第一位时，对应的值为<span class="number">0</span>，即nextval[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"><span class="number">3</span>) 当j＞<span class="number">1</span>时，若T[j] ≠ T[next[j]]时，nextval[j] = next[j]；若T[j] = T[next[j]]时，nextval[j] = nextval[next[j]]</span><br><span class="line"></span><br><span class="line">本题：</span><br><span class="line">第一位默认<span class="number">0</span>；</span><br><span class="line">第二位比较T[<span class="number">2</span>]内容为b与T[next[<span class="number">2</span>]]即T[<span class="number">1</span>]内容为a，则不想等则nextval[<span class="number">2</span>]=next[<span class="number">2</span>]；</span><br><span class="line">第三位比较T[<span class="number">3</span>]内容为a与T[next[<span class="number">3</span>]]即T[<span class="number">1</span>]内容为a，此时相等，nextval为nextval[next[<span class="number">3</span>]]即为<span class="number">0</span>；</span><br><span class="line">第四位比较T[<span class="number">4</span>]与T[next[<span class="number">4</span>]]即T[<span class="number">2</span>]，相等，此时nextval为nextval[next[<span class="number">4</span>]]=<span class="number">1</span>；</span><br><span class="line">第五位比较T[<span class="number">5</span>]与T[next[<span class="number">5</span>]]，此时相等，nextval为nextval[next[<span class="number">5</span>]]即为<span class="number">0</span>；</span><br><span class="line"></span><br><span class="line">最后可得<span class="number">0101015013</span></span><br></pre></td></tr></table></figure></li><li><p>求nextval的值</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/459e8acaa3f757f222d47f642f2ab031?method=download&amp;shareKey=9e7463821d6f6ecaeddd5632c9fec614&amp;inline=true" alt="image"></p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;串是逻辑结构，是限定元素为字符的线性表，用单引号括起来的字符序列是串的值。&lt;/li&gt;
&lt;li&gt;空串：零个字符的串，长度为0。&lt;/li&gt;
&lt;li&gt;空格串：由空格组成的串。&lt;/li&gt;
&lt;li&gt;子串：串中的任意&lt;strong&gt;连续&lt;/strong&gt;的&lt;strong&gt;子序列&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;子串在主串中位置：子串中第一个字符在主串中位置(从1开始)。&lt;/li&gt;
&lt;li&gt;主串：包含子串的串。&lt;/li&gt;
&lt;li&gt;串相等：长度相等，对应字符相等。&lt;/li&gt;
&lt;li&gt;模式匹配是串的一种重要操作。(模式匹配就是找子串的位置)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;串的存储结构：①定长顺序串;②堆分配存储;③块链存储&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="串" scheme="https://fanhang64.github.io/tags/%E4%B8%B2/"/>
    
      <category term="KMP算法" scheme="https://fanhang64.github.io/tags/KMP%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>栈和队列总结</title>
    <link href="https://fanhang64.github.io/2021/01/07/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E6%80%BB%E7%BB%93/"/>
    <id>https://fanhang64.github.io/2021/01/07/栈和队列总结/</id>
    <published>2021-01-07T10:02:12.000Z</published>
    <updated>2021-01-28T14:33:22.930Z</updated>
    
    <content type="html"><![CDATA[<ol><li>栈和队列是两种重要的线性结构。是操作受限的线性表。</li><li>栈只能在一端进行插入和删除操作。</li><li>栈的特点：后进先出LIFO。</li><li>栈的两种存储方式：<strong>顺序栈</strong>，链栈。</li><li>进栈操作：先赋值在加一(栈顶指针始终在栈顶元素的下一个位置上)。</li><li>出栈操作：先减1，再取值。</li><li>关于n个元素可能得到出栈不同排列个数：1/(1+n)Cn.2n</li><li>队列在一端进行插入(队尾rear),在另一端进行删除(队头front)。</li><li>队列特点：先进先出(FIFO)。</li><li>队列的存储结构：顺序队和链队。<a id="more"></a></li></ol><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 顺序栈</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    int data[maxsize];</span><br><span class="line">    int top;  // 总是指向栈顶</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line">#链栈 就是单链表</span><br><span class="line">typedef struct LNode&#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;LNode;</span><br><span class="line"></span><br><span class="line"># 链式队列</span><br><span class="line">typedef struct QNode&#123;  </span><br><span class="line">    int data;</span><br><span class="line">    struct QNode *next;</span><br><span class="line">&#125;QNode;  // 结点定义</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    QNode * front; // 队头指针</span><br><span class="line">    QNode * rear;  // 队尾指针</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"># 循环队列</span><br><span class="line">const int maxsize = 50;</span><br><span class="line">typedef struct &#123;</span><br><span class="line">    ElemType elem[maxsize];</span><br><span class="line">    int front, rear;  // 对头队尾位置</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><ol><li>栈空条件：s.top == 0; </li><li>栈满条件：s.top == maxsize;</li><li>基本算法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 入栈操作</span><br><span class="line">bool push(SqStack &amp;s, ElemType x)&#123;</span><br><span class="line">    if (s.top == maxsize)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 先赋值在加1，top总是指向栈顶的下一个</span><br><span class="line">    s.data[s.top]=x;</span><br><span class="line">    s.top++;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 出栈操作</span><br><span class="line">bool pop(SqStack &amp;s, ElemType &amp;x)&#123;</span><br><span class="line">    if (s.top == 0)&#123;</span><br><span class="line">        retun false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 先减1，再取值</span><br><span class="line">    s.top--;</span><br><span class="line">    x = s.data[s.top];</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">#取栈顶元素</span><br><span class="line">s.data[s.top-1]</span><br></pre></td></tr></table></figure></li></ol><h3 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h3><ol><li>将两个栈的栈低分别设置在共享空间的两端，两个栈顶向共享空间中间延伸。<blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/93b0cba22276540cebb22af88f9299f7?method=download&amp;shareKey=ebc4ccc79f680ceef6cf23eaaa6d9a8a&amp;inline=true" alt="image"></p></blockquote></li></ol><h3 id="链栈-不带头结点"><a href="#链栈-不带头结点" class="headerlink" title="链栈(不带头结点)"></a>链栈(不带头结点)</h3><ol><li>栈空条件：S == NULL。</li><li><p>链栈的所有操作都是在表头进行。如图</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/b34a9779bf502677092d371814883796?method=download&amp;shareKey=d9ab7dd5af824e88151265095e6ef887&amp;inline=true" alt="image"></p></blockquote></li><li><p>基本算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 入栈</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(LinkStack &amp;s, ElemType x)</span></span>&#123;</span><br><span class="line">    p = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    s = p</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 出栈</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(LinkStack &amp;l, ElemType  &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = l-&gt;data;</span><br><span class="line">    p = s;</span><br><span class="line">    s = s-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="链队列-带头节点"><a href="#链队列-带头节点" class="headerlink" title="链队列(带头节点)"></a>链队列(带头节点)</h3><p>实质是同时带<strong>有队头指针</strong>和<strong>队尾指针</strong>的单链表。如图:</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/10a675fb56ff47ca8c76551aafb58963?method=download&amp;shareKey=972836952063323eccd8d5bdeb7ef3e4&amp;inline=true" alt="image"></p></blockquote><ol><li>队列为空条件：Q.front == Q.rear。// 头指针和尾指针都指向头结点</li><li>Q.front总是指向头结点，Q.rear总是指向最后一个结点。</li><li>注：如果队列只有一个元素时，队头也是队尾，删除队头元素也要修改队尾指针(同时指向头节点)(删除操作时，可能头，尾指针都要修改)。</li><li><p>基本算法： </p><p>1)入队列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 入队列</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Enqueue</span><span class="params">(LinkQueue &amp;Q, EmemType x)</span></span>&#123;</span><br><span class="line">    p = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear-&gt;next = p;</span><br><span class="line">    Q.rear = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/83c2e8ff23c008919a063734bd540c83?method=download&amp;shareKey=84fac5e9e0c38b0a0ea76e6f783567b7&amp;inline=true" alt="image"></p></blockquote><p>2)出队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 出队列</span><br><span class="line">bool DequeuQueue(LinkQueue &amp;Q,ElemType &amp;x)&#123;</span><br><span class="line">    if (Q.front == Q.rear)&#123; // 空栈</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    p = Q.front-&gt;next;</span><br><span class="line">    Q.front-&gt;next = p-&gt;next;</span><br><span class="line">    x = p-&gt;data;</span><br><span class="line">    if(Q.rear == p)&#123;</span><br><span class="line">        Q.rear = Q.front;</span><br><span class="line">    &#125;</span><br><span class="line">    free(p);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/e216a0013d49f85146794298f9dd2922?method=download&amp;shareKey=6d02352baa0239e28314dad821c578da&amp;inline=true" alt="image"></p></blockquote></li></ol><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><ol><li>区分队空队满两种方式：通常少用一个元素来区分队空和对列满；也可以加tag作为一标志。</li><li>约定front指向队头元素，rear指向队尾元素的下一个位置。</li><li>当少用一元素时<ul><li>队列空条件：Q.rear == Q.front</li><li>队列满的条件：(Q.rear+1) % MAXSIZE == Q.front</li><li>队列中元素的个数：(Q.rear -Q.front+Maxsize) % Maxsize</li></ul></li><li>当加标志时<ul><li>队列空和满时条件都为Q.front == Q.rear 再用tag标志区分。</li><li>队列空时：Q.front == Q.rear &amp;&amp; Q.tag == 0    // 在删除最后一个元素同时将tag置为0，则为空</li><li>队列满时：Q.front == Q.rear &amp;&amp; Q.tag == 1</li></ul></li><li><p>基本算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 1. 少一个元素空间</span><br><span class="line"># 入队列</span><br><span class="line">bool Enqueue(SqQueue &amp;Q, DataType x)&#123;</span><br><span class="line">    if((Q.rear +1)%maxsize==Q.front)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.elem[e.rear] = x;</span><br><span class="line">    Q.rear = (Q.rear + 1) %maxsize;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 出队</span><br><span class="line">x = Q.elem[Q.front];</span><br><span class="line">Q.front = (Q.front +1)%maxsize;</span><br><span class="line"></span><br><span class="line"># 2. 使用tag标记</span><br><span class="line"># 初始化</span><br><span class="line">void init(SqQueue &amp;Q)&#123;</span><br><span class="line">    Q.front = Q.rear = 0;</span><br><span class="line">    Q.tag = 0;</span><br><span class="line">&#125;</span><br><span class="line"># 入队</span><br><span class="line">bool Enqueue(SqQueue &amp;Q)&#123;</span><br><span class="line">    if(Q.front == Q.rear &amp;&amp; Q.tag == 1)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.elem[Q.rear] = x;</span><br><span class="line">    Q.rear = (Q.rear+1) %maxsize;</span><br><span class="line">    if (Q.tag == 0)</span><br><span class="line">        Q.tag = 1; </span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#出队</span><br><span class="line">bool DeQueue(SqQueue &amp;Q, ElemType &amp;x)&#123;</span><br><span class="line">    if (Q.front == Q.rear &amp;&amp; Q.tag == 0)&#123;  // 上一个操作是出队tag为0</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    x = Q.elem[Q.front];</span><br><span class="line">    Q.front = (Q.front +1)%maxsize;</span><br><span class="line">    if (Q.front == Q.rear)  // 最后一个元素出队，front移动一位置到rear，正好两个指针相等</span><br><span class="line">        Q.tag = 0;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注：</p><ul><li>当前循环队列元素个数：<code>(rear - front + maxsize) % maxsize</code></li><li>当前循环队列剩余空间个数：<code>(front - rear +maxsize) % maxsize</code></li></ul></li></ol><h3 id="栈和队列应用"><a href="#栈和队列应用" class="headerlink" title="栈和队列应用"></a>栈和队列应用</h3><ol><li><p>表达式求值(前缀，中缀，后缀转换)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例如： 表达式为(中缀)： [(A+B)*c] -(E-F)</span><br><span class="line">   中缀转前缀表达式计算(先乘除，后加减，先括号内，后括号外)：</span><br><span class="line">      +AB  -EF</span><br><span class="line">      *+ABC  -EF</span><br><span class="line">      -*+ABC-EF</span><br><span class="line">   中缀转后缀：</span><br><span class="line">      AB+     EF-</span><br><span class="line">      AB+C*   EF-</span><br><span class="line">      AB+C*EF--</span><br></pre></td></tr></table></figure><p>计算：</p><blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/8746b9ecabe7e8e387d01240a96b179c?method=download&amp;shareKey=abf37562e64f115a353e31d44c122da7&amp;inline=true" alt="image"></p></blockquote></li></ol><ol start="2"><li>括号匹配<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 检查输入的表达式括号是否匹配</span><br><span class="line">bool matchBrackets()&#123;</span><br><span class="line">    const int Maxsize = 1024;  // 栈最大容量</span><br><span class="line">    char s[maxsize];</span><br><span class="line">    int top=0;  //栈顶</span><br><span class="line">    ch = getchar();</span><br><span class="line">    while(ch!=EOF)&#123;</span><br><span class="line">        switch(ch)&#123;</span><br><span class="line">            case &apos;(&apos;,&apos;[&apos;,&apos;&#123;&apos;:</span><br><span class="line">               s[top++] = ch; // 先赋值在加一</span><br><span class="line">               break;</span><br><span class="line">            case &apos;)&apos;:</span><br><span class="line">               if(top == 0 || s[--top] != &apos;(&apos;))</span><br><span class="line">                 return false;</span><br><span class="line">            case &apos;]&apos;:</span><br><span class="line">               if (top == 0 || s[--top] != &apos;[&apos;)</span><br><span class="line">                  return false;</span><br><span class="line">             case &apos;&#125;&apos;:</span><br><span class="line">                if (top == 0|| s[--top] != &apos;&#123;&apos;)</span><br><span class="line">                  return false;</span><br><span class="line">        &#125;</span><br><span class="line">     ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    if (top == 0)return true;</span><br><span class="line">    else return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;栈和队列是两种重要的线性结构。是操作受限的线性表。&lt;/li&gt;
&lt;li&gt;栈只能在一端进行插入和删除操作。&lt;/li&gt;
&lt;li&gt;栈的特点：后进先出LIFO。&lt;/li&gt;
&lt;li&gt;栈的两种存储方式：&lt;strong&gt;顺序栈&lt;/strong&gt;，链栈。&lt;/li&gt;
&lt;li&gt;进栈操作：先赋值在加一(栈顶指针始终在栈顶元素的下一个位置上)。&lt;/li&gt;
&lt;li&gt;出栈操作：先减1，再取值。&lt;/li&gt;
&lt;li&gt;关于n个元素可能得到出栈不同排列个数：1/(1+n)Cn.2n&lt;/li&gt;
&lt;li&gt;队列在一端进行插入(队尾rear),在另一端进行删除(队头front)。&lt;/li&gt;
&lt;li&gt;队列特点：先进先出(FIFO)。&lt;/li&gt;
&lt;li&gt;队列的存储结构：顺序队和链队。
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="栈" scheme="https://fanhang64.github.io/tags/%E6%A0%88/"/>
    
      <category term="队列" scheme="https://fanhang64.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>线性表总结.md</title>
    <link href="https://fanhang64.github.io/2021/01/07/%E7%BA%BF%E6%80%A7%E8%A1%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://fanhang64.github.io/2021/01/07/线性表总结/</id>
    <published>2021-01-07T09:59:22.000Z</published>
    <updated>2021-01-28T14:33:13.110Z</updated>
    
    <content type="html"><![CDATA[<ol><li>线性表是相同类型<strong>数据元素</strong>的有限序列，也是一种逻辑结构。</li><li>线性表特点:存在唯一的一个被称为’第一个’的数据元素；存在唯一一个被称为’最后一个’的元素；除第一个元素，其余都有一个’前驱’，除最后一个，都有一个’后继’。</li><li>题型:计算二维数组按行(列)优先方式存放，指定元素的起始地址<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如:二维数组M[i][j]，每个元素长度为3字节，行下标0-7，列下标j从0-9，首地址为In,</span><br><span class="line">若按行优先存放，则M[7][6]的起始地址为In+(7*10+6)*3。</span><br><span class="line">若按列优先存放，则地址In+(6*8+7)*3</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="4"><li>线性表的结构体定义<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#define maxsize 100</span><br><span class="line"></span><br><span class="line"># 顺序表定义</span><br><span class="line">int A[maxsize];</span><br><span class="line">int length;</span><br><span class="line"></span><br><span class="line"># 链表结构体定义(单链表；循环单链表，最后结点指向头结点)</span><br><span class="line">typedef struct LNode&#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;LNode;</span><br><span class="line"></span><br><span class="line"># 双链表结构体定义</span><br><span class="line">typedef struct DLNode&#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct DLNode *prior;  // 指向前驱的指针</span><br><span class="line">    struct DLNode *next;</span><br><span class="line">&#125;DLNode;</span><br><span class="line"></span><br><span class="line"># 动态分配内存</span><br><span class="line">L.data = (ElemType *)malloc(sizeof(ElemType)*size);</span><br></pre></td></tr></table></figure></li></ol><h3 id="顺序表-线性表顺序存储结构"><a href="#顺序表-线性表顺序存储结构" class="headerlink" title="顺序表-线性表顺序存储结构"></a>顺序表-线性表顺序存储结构</h3><ol><li>特点: 逻辑相邻，物理也相邻；随机访问。</li><li>顺序表为空：L.length == 0</li><li>顺序表满：L.length == Maxsize</li><li><p>基本算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># (1) 查找算法</span><br><span class="line">for (i = 0; i &lt; L.length; i++)</span><br><span class="line">    if(L.data[i]==x)</span><br><span class="line">       break；</span><br><span class="line"> if (i&lt;L.length)  // 如果没有找到，最后一次循环，i==L.length了</span><br><span class="line">     return i；// 找到了</span><br><span class="line"> else</span><br><span class="line">     未找到</span><br><span class="line"> </span><br><span class="line"># (2) 插入算法</span><br><span class="line"></span><br><span class="line">bool Sqlistinsert(SqList &amp;L,int i,ElemType x) // 这里i取值从1至length+1</span><br><span class="line">&#123;</span><br><span class="line">   // 如果长度大于L.length+1时超过数组下标范围</span><br><span class="line">   if (i &gt; L.length+1 || L.length==Maxsize || i&lt;1) &#123;</span><br><span class="line">       return false；</span><br><span class="line">   &#125;</span><br><span class="line">   for(j = L.length; j &gt; i-1;j--)</span><br><span class="line">       L.data[j]=L.data[j-1]；</span><br><span class="line">   L.data[i-1] = x；</span><br><span class="line">   L.length++；</span><br><span class="line">   return true；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># (3) 删除算法</span><br><span class="line">其中i的范围同上</span><br><span class="line">bool listDelete(SqlList &amp;L,int i, ElemType &amp;x)&#123;</span><br><span class="line">    if (i &lt; 1|| i &gt; L.length||L.length==0)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    x = L.data[i-1];</span><br><span class="line">    for(j=i; j&lt;L.length;j++)&#123;</span><br><span class="line">        L.data[j-1]=L.data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length--;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>算法分析</p><ul><li>插入，删除时，时间复杂度为O(n)，在尾端插入，删除时时间复杂度为O(1)</li><li>插入时平均移动次数，表长为n，若在任意结点后插入(任意结点前插入)，插入位置有n个，平均移动次数(1+n)/2；在任意位置插入，插入位置有n+1个位置，平均移动次数n/2</li><li>删除时移动元素n-1/2</li></ul></li></ol><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ol><li>特点：用指针表示数据之间的逻辑关系。(逻辑相近的元素，物理位置不一定相邻)</li><li>带头结点单链表判空：L-&gt;next=NULL;单链表不空条件：L-&gt;next=NULL;</li><li>基本算法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"># (1) 顺序访问所有元素</span><br><span class="line">void printvalue(Linklist &amp;L)&#123;</span><br><span class="line">  p = L-&gt;next;</span><br><span class="line">  while (p !=NULL)&#123;</span><br><span class="line">      visit(p-&gt;data);</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># (2) 查找元素x,找到返回地址</span><br><span class="line">Linist Find(Linklist L, ElemType x)&#123;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    wile (p != NULL)&#123;</span><br><span class="line">        if (p.data == x) return p;</span><br><span class="line">    &#125;</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br><span class="line"># (3) 查找元素，先到返回位序</span><br><span class="line">int Find(LinkList L,ElemType x)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (p!=NULL)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        if (p-&gt;data==x)&#123;</span><br><span class="line">            return i;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    return i;</span><br><span class="line">&#125;</span><br><span class="line"># (4) 查找第i个位置</span><br><span class="line">Linklist Get(Linklist L, int i)&#123; // i的取值从1开始</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j = 1;</span><br><span class="line">    while (p!=NULL &amp;&amp; j &lt; i)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    if (p &amp;&amp; j == i)&#123;</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br><span class="line"># (5) 插入算法</span><br><span class="line">bool insertLit(Linklist &amp;L, int i, ElemType x)&#123;  // 插入到第i的位置,例如插入到2位置，的指针应该指向1的元素位置</span><br><span class="line">    p = L;</span><br><span class="line">    j = 0;</span><br><span class="line">    // 首先找到第i的元素(1--n)</span><br><span class="line">    while(p &amp;&amp; j &lt; i-1)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p &amp;&amp; j== i-1)&#123;</span><br><span class="line">        t = (Linklist)malloc(sizeof(LNode);</span><br><span class="line">        t-&gt;data = x;</span><br><span class="line">        t-&gt;next=p-&gt;net;</span><br><span class="line">        p-&gt;next = t;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"># (6) 删除算法</span><br><span class="line">bool LinklistDelete(LinkList L, int i, ElemType &amp;x)&#123;</span><br><span class="line">    // 找到i-1的元素位置(从1开始)</span><br><span class="line">    p = L;</span><br><span class="line">    j = 0;</span><br><span class="line">    while (p &amp;&amp; j &lt; i-1)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(p &amp;&amp; j == i-1 &amp;&amp; p-&gt;next)&#123;</span><br><span class="line">        x = p-&gt;next-&gt;data;</span><br><span class="line">        s = p-&gt;next;</span><br><span class="line">        p-&gt;next = s-&gt;next;</span><br><span class="line">        free(s);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"># (7) 链表创建</span><br><span class="line">void createLinkList(Linklist &amp;L, int n)&#123;  // 尾插法插入n个元素</span><br><span class="line">    L = (Linklist)malloc(sizeof(LNode);</span><br><span class="line">    L-&gt;next = NULL;</span><br><span class="line">    p = L;</span><br><span class="line">    for(int i =0; i&lt;n;i++)&#123;</span><br><span class="line">        scanf(x);</span><br><span class="line">        s = (Linklist)malloc(sizeof(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        s-&gt;next = p-&gt;next;</span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">        p = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 头插法</span><br><span class="line">s = (Linklist)malloc(sizeof(LNode));</span><br><span class="line">s-&gt;data = x;</span><br><span class="line">s-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = s;</span><br><span class="line"></span><br><span class="line"># (8) 将两个有序链表合并为一个</span><br><span class="line">void merge(LinkList &amp;La, linLinklist &amp;Lb, Linklist &amp;Lc)&#123;</span><br><span class="line">    pa = La.next; pb =Lb.next;</span><br><span class="line">    Lc = pc =La;  // La的头节点当做Lc的头节点</span><br><span class="line">    while(pa &amp;&amp; pb)&#123;</span><br><span class="line">        if (pa-&gt;data &lt;= pb-&gt;data)&#123;</span><br><span class="line">            pc-&gt;next = pa;</span><br><span class="line">            pc = pa;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            pc-next = pb;</span><br><span class="line">            pc = pb;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pc-&gt;next = pa?pa:pb; // pa为空，则等于pb</span><br><span class="line">    free(Lb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="循环链表-单向循环链表"><a href="#循环链表-单向循环链表" class="headerlink" title="循环链表(单向循环链表)"></a>循环链表(单向循环链表)</h3><ol><li>特点：最后一个结点的指针指向头结点</li><li>循环链表空表：<code>L-&gt;next == L</code></li><li>判断表为的方法与单链表不同：<code>单链表是p==NULL；循环链表是p==L</code>。</li><li>循环链表只设尾指针操作效率会更高。</li></ol><h3 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h3><ol><li>特点：每个结点包含后继(next)和前驱(prior)，且两个方向又分别构成循环链表。</li><li>双向循环链表判断空表条件(带头节点)：<code>L-&gt;next ==L &amp;&amp;L-&gt;prior==L</code></li><li>与单链表和循环链表区别：最大不同是前驱容易求得，可以向前遍历；</li><li>判断表尾方法与循环链表相同：p == L</li><li>双向循环链表每个指针都指向前或后一个结点，都不为空。</li><li><p>插入和删除操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 在p之后插入s结点</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = s;</span><br><span class="line">s-&gt;prior = p;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"></span><br><span class="line"># 在p之前插入s</span><br><span class="line">s-&gt;prior = p-&gt;prior;</span><br><span class="line">p-&gt;prior-&gt;next = s;</span><br><span class="line">s-&gt;next = p;</span><br><span class="line">p-&gt;prior = s;</span><br><span class="line"></span><br><span class="line"># 删除p后继s</span><br><span class="line">s = p-&gt;next;</span><br><span class="line">p-&gt;next = s-&gt;next;</span><br><span class="line">s-&gt;next-&gt;prior = s-&gt;prior;</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line"></span><br><span class="line"># 删除p</span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure></li><li><p>为了方便插入和删除，可以使用<strong>双链表</strong>存放数据。</p></li></ol><h3 id="顺序表和链表比较"><a href="#顺序表和链表比较" class="headerlink" title="顺序表和链表比较"></a>顺序表和链表比较</h3><ol><li>顺序表元素在物理和逻辑上都相邻；链表在逻辑上相邻，物理上不一定。</li><li>顺序表随机访问，取元素时O(1)；链表顺序访问，取元素时O(n)。</li><li>顺序表插入，删除时需要移动O(n)；单链表插入，删除不用移动元素O(n)(用于查找位置)。</li><li>需要反复插入，删除宜采用链表；反复提取，很少插入，删除，宜采用顺序表。</li><li>链式存储比顺序存储能更方便的表示各种逻辑结构。</li></ol><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><ol><li>需要分配很大的连续空间，插入和删除不需要移动元素。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;线性表是相同类型&lt;strong&gt;数据元素&lt;/strong&gt;的有限序列，也是一种逻辑结构。&lt;/li&gt;
&lt;li&gt;线性表特点:存在唯一的一个被称为’第一个’的数据元素；存在唯一一个被称为’最后一个’的元素；除第一个元素，其余都有一个’前驱’，除最后一个，都有一个’后继’。&lt;/li&gt;
&lt;li&gt;题型:计算二维数组按行(列)优先方式存放，指定元素的起始地址&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;例如:二维数组M[i][j]，每个元素长度为3字节，行下标0-7，列下标j从0-9，首地址为In,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若按行优先存放，则M[7][6]的起始地址为In+(7*10+6)*3。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若按列优先存放，则地址In+(6*8+7)*3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="线性表" scheme="https://fanhang64.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="https://fanhang64.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>关闭textarea的拼写检查</title>
    <link href="https://fanhang64.github.io/2019/09/06/textarea%E6%8B%BC%E5%86%99%E6%A3%80%E6%9F%A5/"/>
    <id>https://fanhang64.github.io/2019/09/06/textarea拼写检查/</id>
    <published>2019-09-06T04:46:58.000Z</published>
    <updated>2021-01-28T13:35:14.826Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用<code>textarea</code>标签发现下面这个问题, 一顿Google最后解决,现在把解决方法做个记录。</p><p><img src="https://i.loli.net/2019/09/06/JFOe7981iYkIrGR.png" alt="1567745626_1_.jpg"></p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加 spellcheck="false" 属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control share-text"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">spellcheck</span>=<span class="string">"false"</span> &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近使用&lt;code&gt;textarea&lt;/code&gt;标签发现下面这个问题, 一顿Google最后解决,现在把解决方法做个记录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/09/06/JFOe7981iYkIrGR.png&quot; alt=&quot;1
      
    
    </summary>
    
      <category term="html" scheme="https://fanhang64.github.io/categories/html/"/>
    
    
      <category term="textarea" scheme="https://fanhang64.github.io/tags/textarea/"/>
    
  </entry>
  
  <entry>
    <title>git subtree 的使用</title>
    <link href="https://fanhang64.github.io/2019/06/12/subtree%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://fanhang64.github.io/2019/06/12/subtree的使用/</id>
    <published>2019-06-12T13:45:49.000Z</published>
    <updated>2021-01-28T13:35:14.811Z</updated>
    
    <content type="html"><![CDATA[<p>git subtree的主要命令有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree pull  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree push  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree merge --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree split --prefix=&lt;prefix&gt; [OPTIONS] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>我们先准备一个仓库叫Photo，一个仓库叫libPNG，然后我们希望把libPNG作为Photo的子仓库。<br>Photo的路径为<code>https://github.com/fanhang64/Photo.git</code>，仓库里的文件有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Photo</span><br><span class="line">|</span><br><span class="line">    |-- .gitignore</span><br><span class="line">    |-- Photo.c</span><br><span class="line">    |-- Photo.h</span><br><span class="line">    |-- main.c</span><br><span class="line">    \-- README.rst</span><br></pre></td></tr></table></figure><a id="more"></a><p>libPNG的路径为<code>https://github.com/fanhang64/libPNG.git</code>，仓库里的文件有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">libpng</span><br><span class="line">    |</span><br><span class="line">    |-- libpng.c</span><br><span class="line">    |-- libpng.h</span><br><span class="line">    |-- README.rst</span><br><span class="line">    |--test.c</span><br><span class="line">    |--test.h</span><br></pre></td></tr></table></figure><p>以下操作均位于父仓库的根目录中。</p><h2 id="在父仓库中新增子仓库"><a href="#在父仓库中新增子仓库" class="headerlink" title="在父仓库中新增子仓库"></a>在父仓库中新增子仓库</h2><p>我们执行以下命令把libpng添加到Photo中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree add --prefix=sub/libpng https://github.com/fanhang64/libpng.git master --squash</span><br></pre></td></tr></table></figure><p>(<code>--squash</code>参数表示不拉取历史信息，而只生成一条commit信息。)</p><p>执行<code>git status</code>可以看到提示新增两条commit：<br><img src="https://s2.ax1x.com/2019/06/12/VWn2Ss.png" alt="image"></p><p><code>git log</code>查看详细修改：<br><img src="https://s2.ax1x.com/2019/06/12/VWuZ0f.png" alt="image"></p><p>执行<code>git push</code>把修改推送到远端Photo仓库，现在本地仓库与远端仓库的目录结构为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Photo</span><br><span class="line">    |</span><br><span class="line">    |-- sub/</span><br><span class="line">    |   |</span><br><span class="line">    |   \--libpng/</span><br><span class="line">    |       |</span><br><span class="line">    |       |-- libpng.c</span><br><span class="line">    |       |-- libpng.h</span><br><span class="line">    |       \-- README.rst</span><br><span class="line">    ||-- test.c</span><br><span class="line">    ||-- test.h</span><br><span class="line">    |</span><br><span class="line">    |-- Photo.c</span><br><span class="line">    |-- Photo.h</span><br><span class="line">    |-- main.c</span><br><span class="line">    \-- README.rst</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>现在的Photo仓库对于其他项目人员来说，可以不需要知道libpng是一个子仓库。什么意思呢？<br>当你<code>git clone</code>或者<code>git pull</code>的时候，你拉取到的是整个Photo(包括libpng在内，libpng就相当于Photo里的一个普通目录)；当你修改了libpng里的内容后执行<code>git push</code>，你将会把修改push到Photo上。<br>也就是说Photo仓库下的libpng与其他文件无异。</p><h2 id="从源仓库拉取更新"><a href="#从源仓库拉取更新" class="headerlink" title="从源仓库拉取更新"></a>从源仓库拉取更新</h2><p>如果源libpng仓库更新了，Photo里的libpng如何拉取更新？使用<code>git subtree pull</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree pull --prefix=sub/libpng https://github.com/fanhang64/libpng.git master --squash</span><br></pre></td></tr></table></figure><h2 id="推送修改到源仓库"><a href="#推送修改到源仓库" class="headerlink" title="推送修改到源仓库"></a>推送修改到源仓库</h2><p>如果在Photo仓库里修改了libpng，然后想把这个修改推送到源libpng仓库呢？使用<code>git subtree push</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree push --prefix=sub/libpng https://github.com/fanhang64/libPNG.git master</span><br></pre></td></tr></table></figure><h2 id="简化git-subtree命令"><a href="#简化git-subtree命令" class="headerlink" title="简化git subtree命令"></a>简化git subtree命令</h2><p>我们已经知道了git subtree 的命令的基本用法，但是上述几个命令还是显得有点复杂，特别是子仓库的源仓库地址，特别不方便记忆。<br>这里我们把子仓库的地址作为一个remote，方便记忆：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add -f libpng https://github.com/fanhang64/libPNG.git</span><br></pre></td></tr></table></figure><p>然后可以这样来使用git subtree命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git subtree add --prefix=sub/libpng libpng master --squash</span><br><span class="line">git subtree pull --prefix=sub/libpng libpng master --squash</span><br><span class="line">git subtree push --prefix=sub/libpng libpng master</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://segmentfault.com/a/1190000012002151" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012002151</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git subtree的主要命令有：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git subtree add   --prefix=&amp;lt;prefix&amp;gt; &amp;lt;commit&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree add   --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;ref&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree pull  --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;ref&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree push  --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;ref&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree merge --prefix=&amp;lt;prefix&amp;gt; &amp;lt;commit&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree split --prefix=&amp;lt;prefix&amp;gt; [OPTIONS] [&amp;lt;commit&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;我们先准备一个仓库叫Photo，一个仓库叫libPNG，然后我们希望把libPNG作为Photo的子仓库。&lt;br&gt;Photo的路径为&lt;code&gt;https://github.com/fanhang64/Photo.git&lt;/code&gt;，仓库里的文件有：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Photo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .gitignore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- Photo.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- Photo.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    \-- README.rst&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="git相关" scheme="https://fanhang64.github.io/categories/git%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="git" scheme="https://fanhang64.github.io/tags/git/"/>
    
      <category term="subtree" scheme="https://fanhang64.github.io/tags/subtree/"/>
    
  </entry>
  
  <entry>
    <title>C语言正确使用extern关键字</title>
    <link href="https://fanhang64.github.io/2019/05/23/C%E8%AF%AD%E8%A8%80%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8extern%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://fanhang64.github.io/2019/05/23/C语言正确使用extern关键字/</id>
    <published>2019-05-23T15:47:56.000Z</published>
    <updated>2021-01-28T13:35:14.811Z</updated>
    
    <content type="html"><![CDATA[<p>利用关键字extern，可以在一个文件中引用另一个文件中定义的变量或者函数，下面就结合具体的实例，分类说明一下。 </p><h3 id="一、引用同一个文件中的变量"><a href="#一、引用同一个文件中的变量" class="headerlink" title="一、引用同一个文件中的变量"></a>一、引用同一个文件中的变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    func();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照这个顺序，变量 <code>num</code>在<code>main</code>函数的后边进行声明和初始化的话，那么在<code>main</code>函数中是不能直接引用<code>num</code>这个变量的，因为当编译器编译到这一句话的时候，找不到<code>num</code>这个变量的声明，但是在<code>func</code>函数中是可以正常使用，因为<code>func</code>对<code>num</code>的调用是发生在<code>num</code>的声明和初始化之后。</p><a id="more"></a><p><strong>问题：</strong> 如果我不想改变<code>num</code>的声明的位置，但是想在<code>main</code>函数中直接使用<code>num</code>这个变量，怎么办呢？</p><p>可以使用<code>extern</code>这个关键字。像下面这一段代码，利用<code>extern</code>关键字先声明一下<code>num</code>变量，告诉编译器<code>num</code>这个变量是存在的，但是不是在这之前声明的，你到别的地方找找吧，果然，这样就可以顺利通过编译啦。但是你要是想欺骗编译器也是不行的，比如你声明了<code>extern int num；</code>但是在后面却没有真正的给出<code>num</code>变量的声明，那么编译器去别的地方找了，但是没找到还是不行的。</p><p>下面的程序就是利用<code>extern</code>关键字，使用在后边定义的变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    func();  <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);  <span class="comment">// 3 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、引用另一个文件中的变量"><a href="#二、引用另一个文件中的变量" class="headerlink" title="二、引用另一个文件中的变量"></a>二、引用另一个文件中的变量</h3><p>如果<code>extern</code>这个关键字就这点功能，那么这个关键字就显得多余了，因为上边的程序可以通过将<code>num</code>变量在<code>main</code>函数的上边声明，使得在<code>main</code>函数中也可以使用。<br><code>extern</code>这个关键字的真正的作用是引用不在同一个文件中的变量或者函数。</p><p><strong>实例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> num;  <span class="comment">// 引用b.c中的num</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在b.c文件中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fun in b.c"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，这里<code>b.c</code>中定义了一个变量num，如果<code>main.c</code>中想要引用这个变量，那么可以使用<code>extern</code>这个关键字，注意这里能成功引用的原因是，<code>num</code>这个关键字在<code>b.c</code>中是一个全局变量，也就是说只有当一个变量是一个全局变量时，<code>extern</code>变量才会起作用，向下面这样是不行的。</p><p><strong>实例：</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在mian.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> num;  <span class="comment">// ok 声明时候不会报错</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);  <span class="comment">// error </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在b.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">5</span>;  <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fun in b.c"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，<code>extern</code>关键字只需要指明类型和变量名就行了，不能再重新赋值，初始化需要在原文件所在处进行，如果不进行初始化的话，全局变量会被编译器自动初始化为0。下面像这种写法是不行的，<code>extern int num=4;</code> ，<br>但是在声明之后就可以使用变量名进行修改了，像这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> num;</span><br><span class="line">    num=<span class="number">1</span>;  <span class="comment">// ok </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想这个变量被修改可以使用const关键字进行修饰，写法如下： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在mian.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在b.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fun in b.c"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>include</code>将另一个文件全部包含进去可以引用另一个文件中的变量，但是这样做的结果就是，被包含的文件中的所有的变量和方法都可以被这个文件使用，这样就变得不安全，如果只是希望一个文件使用另一个文件中的某个变量还是使用<code>extern</code>关键字更好（注意：没有<code>include &quot;b.c&quot;</code>文件）。</p><h3 id="三、引用另一个文件中的函数"><a href="#三、引用另一个文件中的函数" class="headerlink" title="三、引用另一个文件中的函数"></a>三、引用另一个文件中的函数</h3><p><code>extern</code> 关键字除了引用另一个文件中的变量外，还可以引用另一个文件中的函数，引用方法和引用变量相似。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在mian.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">    func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在b.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fun in b.c"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>main</code>函数中引用了<code>b.c</code>中的函数<code>func</code>。因为所有的函数都是全局的，所以对函数的<code>extern</code>用法和对全局变量的修饰基本相同，需要注意的就是，需要指明返回值的类型和参数。</p><p>文章转自网络，查看原文章，请访问：<a href="http://blog.csdn.net/xingjiarong/article/details/47656339" target="_blank" rel="noopener">http://blog.csdn.net/xingjiarong/article/details/47656339</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用关键字extern，可以在一个文件中引用另一个文件中定义的变量或者函数，下面就结合具体的实例，分类说明一下。 &lt;/p&gt;
&lt;h3 id=&quot;一、引用同一个文件中的变量&quot;&gt;&lt;a href=&quot;#一、引用同一个文件中的变量&quot; class=&quot;headerlink&quot; title=&quot;一、引用同一个文件中的变量&quot;&gt;&lt;/a&gt;一、引用同一个文件中的变量&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果按照这个顺序，变量 &lt;code&gt;num&lt;/code&gt;在&lt;code&gt;main&lt;/code&gt;函数的后边进行声明和初始化的话，那么在&lt;code&gt;main&lt;/code&gt;函数中是不能直接引用&lt;code&gt;num&lt;/code&gt;这个变量的，因为当编译器编译到这一句话的时候，找不到&lt;code&gt;num&lt;/code&gt;这个变量的声明，但是在&lt;code&gt;func&lt;/code&gt;函数中是可以正常使用，因为&lt;code&gt;func&lt;/code&gt;对&lt;code&gt;num&lt;/code&gt;的调用是发生在&lt;code&gt;num&lt;/code&gt;的声明和初始化之后。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://fanhang64.github.io/categories/C-C/"/>
    
    
      <category term="C语言" scheme="https://fanhang64.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>numpy常用数组操作函数</title>
    <link href="https://fanhang64.github.io/2019/05/08/numpy%E5%B8%B8%E7%94%A8%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0-md/"/>
    <id>https://fanhang64.github.io/2019/05/08/numpy常用数组操作函数-md/</id>
    <published>2019-05-08T15:34:59.000Z</published>
    <updated>2021-01-28T13:35:14.811Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Numpy-数组操作函数"><a href="#Numpy-数组操作函数" class="headerlink" title="Numpy 数组操作函数"></a>Numpy 数组操作函数</h4><p>Numpy 中包含了一些函数用于处理数组，大概可分为以下几类：</p><ul><li>修改数组形状</li><li>翻转数组</li><li>连接数组</li><li>分割数组</li><li>数组元素的添加与删除<a id="more"></a></li></ul><h4 id="修改数组形状"><a href="#修改数组形状" class="headerlink" title="修改数组形状"></a>修改数组形状</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  numpy.reshape(shape, order='C')  </span></span><br><span class="line"><span class="comment"># 参数: order：'C' -- 按行，'F' -- 按列，'A' -- 原顺序，'k' -- 元素在内存中的出现顺序。</span></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndarray.flatten(order='C')</span></span><br><span class="line"><span class="comment"># 返回一份数组拷贝,并返回一维数组</span></span><br><span class="line"><span class="comment"># 参数: </span></span><br><span class="line">&gt;&gt; arr.flatten()</span><br><span class="line">array([ <span class="number">1</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">4</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">7</span>,  <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.ravel([order])</span></span><br><span class="line"><span class="comment"># 展平的数组元素，返回一维数组拷贝,不影响原数组。</span></span><br><span class="line">&gt;&gt; arr.ravel()</span><br><span class="line">array([ <span class="number">1</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">4</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">7</span>,  <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>])</span><br><span class="line">&gt;&gt; arr</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br></pre></td></tr></table></figure><h4 id="翻转数组函数"><a href="#翻转数组函数" class="headerlink" title="翻转数组函数"></a>翻转数组函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  np.transpose(a, axes=None)  #  函数用于对换数组的维度</span></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">&gt;&gt; print(np.transpose(arr))</span><br><span class="line">&gt;&gt; print(arr.T)  <span class="comment"># 转置矩阵(同上)</span></span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">0</span>  <span class="number">4</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">7</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><h4 id="连接数组"><a href="#连接数组" class="headerlink" title="连接数组"></a>连接数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.concatenate((a1, a2, ...), axis)  # 数用于沿指定轴连接相同形状的两个或多个数组</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">&gt;&gt; arr2 = np.array([[<span class="number">5</span> ,<span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line">&gt;&gt; print(arr, arr2)</span><br><span class="line">&gt;&gt; print(np.concatenate((arr, arr2)))  <span class="comment"># 沿着行连接</span></span><br><span class="line">&gt;&gt; print(np.concatenate((arr, arr2), axis=<span class="number">1</span>)  <span class="comment"># 沿着列链接</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]] [[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line"><span class="comment"># np.stack(arrays, axis=0)  # 函数用于沿指定轴堆积数组序列</span></span><br><span class="line">&gt;&gt; arr = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">&gt;&gt; arr2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line">&gt;&gt; print(np.stack((arr, arr2)))  <span class="comment"># 沿着行堆积数组, 二维堆成三维</span></span><br><span class="line">&gt;&gt; print(np.stack((arr, arr2), axis=<span class="number">1</span>))  <span class="comment"># 沿着列堆积数组</span></span><br><span class="line">[[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">  [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line"> [[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">  [<span class="number">7</span> <span class="number">8</span>]]]</span><br><span class="line"></span><br><span class="line">[[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">  [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">  [<span class="number">7</span> <span class="number">8</span>]]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.hstack()  # 通过水平堆积来生成数组(横向)</span></span><br><span class="line">&gt;&gt; a = np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">&gt;&gt; b = np.array((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">&gt;&gt; np.hstack((a,b))</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">&gt;&gt; a = np.array([</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    [<span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>]</span><br><span class="line">])</span><br><span class="line">&gt;&gt; b = np.array([</span><br><span class="line">    [<span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>]</span><br><span class="line">])</span><br><span class="line">&gt;&gt; np.hstack((a,b))  <span class="comment"># 水平扩展(a的[1]与b的[2])</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.vstack()  # 通过竖直堆积生成数组</span></span><br><span class="line">&gt;&gt; a = np.array([</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">])</span><br><span class="line">&gt;&gt; b = np.array([</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">])</span><br><span class="line">&gt;&gt; print(np.vstack((a, b)))</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><h4 id="分割数组"><a href="#分割数组" class="headerlink" title="分割数组"></a>分割数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.split(arr, indices_or_sections, axis=0) # 函数沿特定的轴将数组分割为子数组</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; a = np.arange(<span class="number">9</span>)</span><br><span class="line">&gt;&gt; np.split(a, <span class="number">1</span>)</span><br><span class="line">[array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])]</span><br><span class="line">&gt;&gt; np.split(a, <span class="number">3</span>)  <span class="comment"># 将数组分为三个大小相等的子数组</span></span><br><span class="line">[array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]), array([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), array([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])]</span><br><span class="line">&gt;&gt; np.split(a, [<span class="number">4</span>, <span class="number">7</span>])  <span class="comment"># 将数组在一维数组中表明的位置分割</span></span><br><span class="line">[array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]), array([<span class="number">7</span>, <span class="number">8</span>])]</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.hsplit(arr, indices_or_sections) 函数用于水平分割数组，通过指定要返回的相同形状的数组数量来拆分原数组。</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; x = np.arange(<span class="number">16.0</span>).reshape(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">&gt;&gt; print(x)</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">       [<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>]])</span><br><span class="line">&gt;&gt; np.hsplit(x, <span class="number">2</span>)</span><br><span class="line">[array([[ <span class="number">0.</span>,  <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>],</span><br><span class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>],</span><br><span class="line">       [<span class="number">12.</span>, <span class="number">13.</span>]]), array([[ <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">       [<span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">       [<span class="number">14.</span>, <span class="number">15.</span>]])]</span><br><span class="line">&gt;&gt; np.hsplit(x, np.array([<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line">[array([[ <span class="number">0.</span>],</span><br><span class="line">        [ <span class="number">4.</span>],</span><br><span class="line">        [ <span class="number">8.</span>],</span><br><span class="line">        [<span class="number">12.</span>]]), array([[ <span class="number">1.</span>],</span><br><span class="line">        [ <span class="number">5.</span>],</span><br><span class="line">        [ <span class="number">9.</span>],</span><br><span class="line">        [<span class="number">13.</span>]]), array([[ <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">        [ <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">        [<span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">        [<span class="number">14.</span>, <span class="number">15.</span>]])]</span><br></pre></td></tr></table></figure><p>参考文档:<br><a href="https://www.runoob.com/numpy/numpy-array-manipulation.html" target="_blank" rel="noopener">https://www.runoob.com/numpy/numpy-array-manipulation.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Numpy-数组操作函数&quot;&gt;&lt;a href=&quot;#Numpy-数组操作函数&quot; class=&quot;headerlink&quot; title=&quot;Numpy 数组操作函数&quot;&gt;&lt;/a&gt;Numpy 数组操作函数&lt;/h4&gt;&lt;p&gt;Numpy 中包含了一些函数用于处理数组，大概可分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改数组形状&lt;/li&gt;
&lt;li&gt;翻转数组&lt;/li&gt;
&lt;li&gt;连接数组&lt;/li&gt;
&lt;li&gt;分割数组&lt;/li&gt;
&lt;li&gt;数组元素的添加与删除
    
    </summary>
    
      <category term="数据分析与机器学习" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据" scheme="https://fanhang64.github.io/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加访问量统计</title>
    <link href="https://fanhang64.github.io/2019/05/07/hexo%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/"/>
    <id>https://fanhang64.github.io/2019/05/07/hexo添加访问量统计/</id>
    <published>2019-05-06T16:30:18.000Z</published>
    <updated>2021-01-28T14:48:01.046Z</updated>
    
    <content type="html"><![CDATA[<p>使用的是不蒜子提供的阅读统计功能，hexo主题是next。</p><h4 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下:"></a>步骤如下:</h4><h5 id="1-添加是否开启统计功能的配置"><a href="#1-添加是否开启统计功能的配置" class="headerlink" title="1) 添加是否开启统计功能的配置"></a>1) 添加是否开启统计功能的配置</h5><a id="more"></a><p>找到next主题的配置文件<code>themes/next/_config.yml</code>，找到原来的footer字段，加入一个配置，这里我们叫它counter吧，即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  counter: true</span><br></pre></td></tr></table></figure></p><p><strong>注意:</strong><br>hexo博客解决不蒜子统计无法显示问题, 这里引用官网</p><blockquote><p>因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！</p></blockquote><h5 id="2-修改next主题的模板文件"><a href="#2-修改next主题的模板文件" class="headerlink" title="2) 修改next主题的模板文件"></a>2) 修改next主题的模板文件</h5><p>由于是把访问量统计放在网页的footer，所以我们需要修改的模板文件是<code>theme/next/layout/_partials/footer.swig</code>。<br>我们在合适的位置加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.footer.counter %&#125;</span><br><span class="line">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;总访客&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用的是不蒜子提供的阅读统计功能，hexo主题是next。&lt;/p&gt;
&lt;h4 id=&quot;步骤如下&quot;&gt;&lt;a href=&quot;#步骤如下&quot; class=&quot;headerlink&quot; title=&quot;步骤如下:&quot;&gt;&lt;/a&gt;步骤如下:&lt;/h4&gt;&lt;h5 id=&quot;1-添加是否开启统计功能的配置&quot;&gt;&lt;a href=&quot;#1-添加是否开启统计功能的配置&quot; class=&quot;headerlink&quot; title=&quot;1) 添加是否开启统计功能的配置&quot;&gt;&lt;/a&gt;1) 添加是否开启统计功能的配置&lt;/h5&gt;
    
    </summary>
    
      <category term="hexo的使用" scheme="https://fanhang64.github.io/categories/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="hexo的使用" scheme="https://fanhang64.github.io/tags/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>numpy的基本使用</title>
    <link href="https://fanhang64.github.io/2019/05/05/numpy%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://fanhang64.github.io/2019/05/05/numpy的基本使用/</id>
    <published>2019-05-04T16:06:12.000Z</published>
    <updated>2021-01-28T13:35:14.811Z</updated>
    
    <content type="html"><![CDATA[<h4 id="NumPy的基本使用"><a href="#NumPy的基本使用" class="headerlink" title="NumPy的基本使用"></a>NumPy的基本使用</h4><p>Numpy是一个开源的Python科学计算库，它是Python进行科学计算的基础库，许多著名的科学计算库如Pandas，Scikit-learn等都要用到Numpy库的一些功能。NumPy根据BSD许可证授权，只需很少的限制即可重复使用。<br><a id="more"></a></p><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p>NumPy是一个元素表(通常是数字), 这些元素都具有相同的类型，由正整数元组索引的多维数组。在NumPy维度中称为轴。</p><p>例如:</p><p>在一个3D空间中[<code>1, 2, 1]</code> 有一个轴, 这个轴里面有三个元素, 因此它的长度就是3。如下所示, 这个数组有2个轴, 第一个轴长度为2 即<code>[1., 0., 0.]</code>和<code>[0., 1., 2.]</code> ,  第二个轴长度为3(三个元素)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line"> [ <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>]]</span><br></pre></td></tr></table></figure><p>NumPy的类型称为<code>ndarray</code>, 即数组。请注意，<code>numpy.array</code>与标准Python库类<code>array.array</code>不同。如下是常用属性: </p><p><strong>ndarray.ndim : </strong> 数组轴的个数(维度)。</p><p><strong>ndarray.shape : </strong> 数组的维度, 返回一个整数的元组, 表示这个维度数组的大小, 对于一个n行和m列的矩阵，<code>shape</code>将为<code>（n，m）</code>。注意，<code>shape</code>这个元组的长度是轴的数量即<code>ndim</code>。</p><p><strong>ndarray.size : </strong> 数组所有元素的个数。</p><p><strong>ndarray.dtype : </strong> 描述数组元素类型。</p><p><strong>ndarray.itemsize : </strong> 数组中每个元素的字节大小。</p><p><strong>ndarray.T : </strong> 数组的转置。</p><p><strong>ndarray.real : </strong> 输出数组包含元素的实部。</p><p><strong>ndarray.imag : </strong> 输出数组包含元素的虚部分。</p><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.arange([start,] stop[, step,], dtype=None)</span></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">3</span>)</span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([0, 1, 2])</span></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">3.0</span>)  <span class="comment"># 与python标准库函数range不同, arange可以传float类型参数</span></span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([0., 1., 2.])</span></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([3, 4, 5, 6])</span></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># array([[ 0,  1,  2,  3,  4],</span></span><br><span class="line"><span class="comment">#       [ 5,  6,  7,  8,  9],</span></span><br><span class="line"><span class="comment">#       [10, 11, 12, 13, 14]])</span></span><br><span class="line">print(arr.shape)  <span class="comment"># (3, 5)</span></span><br><span class="line">print(arr.ndim)  <span class="comment"># 2</span></span><br><span class="line">print(arr.dtype.name)  <span class="comment"># int64</span></span><br><span class="line">print(arr.itemsize)  <span class="comment"># 8</span></span><br><span class="line">print(arr.size)  <span class="comment"># 15</span></span><br><span class="line">print(type(arr))  <span class="comment"># &lt;type 'numpy.ndarray'&gt;</span></span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print(type(arr))  <span class="comment"># &lt;type 'numpy.ndarray'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><p><strong>1) 通过列表或元组创建</strong></p><p>最终数组的类型取决于序列中元素的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(arr)  <span class="comment"># array([2, 3, 4])</span></span><br><span class="line">print(arr.dtype)  <span class="comment"># dtype('int64')</span></span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">3.4</span>])</span><br><span class="line">print(arr.dtype)  <span class="comment"># dtype('float64')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维数组 (2*3)</span></span><br><span class="line">arr2 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>], [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line">print(arr2)</span><br><span class="line"><span class="comment"># array([[1, 2, 4],</span></span><br><span class="line"><span class="comment">#       [3, 4, 5]])</span></span><br></pre></td></tr></table></figure><p><strong>2) 通过np.arrange()等方法创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line">print(arr)  <span class="comment"># array([10, 15, 20, 25])</span></span><br><span class="line"></span><br><span class="line">arr = np.zeros((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(arr)  <span class="comment"># 创建一个全为0的数组</span></span><br><span class="line"><span class="comment"># array([[ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="comment">#       [ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="comment">#       [ 0.,  0.,  0.,  0.]])</span></span><br><span class="line"></span><br><span class="line">arr = np.ones((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), dtype=np.int16)  <span class="comment"># 可以指定参数</span></span><br><span class="line">print(arr)  <span class="comment"># 创建一个全为1的数组</span></span><br><span class="line"><span class="comment"># array([[[ 1, 1, 1, 1],</span></span><br><span class="line"><span class="comment">#        [ 1, 1, 1, 1],</span></span><br><span class="line"><span class="comment">#        [ 1, 1, 1, 1]],</span></span><br><span class="line"><span class="comment">#       [[ 1, 1, 1, 1],</span></span><br><span class="line"><span class="comment">#        [ 1, 1, 1, 1],</span></span><br><span class="line"><span class="comment">#        [ 1, 1, 1, 1]]], dtype=int16)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None) </span></span><br><span class="line"><span class="comment"># 返回在start到stop之间均匀分布的num个数字，可以选择是否包括stop. retstep表示是否返回步长.</span></span><br><span class="line"></span><br><span class="line">arr = np.linspace(<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="literal">True</span>)</span><br><span class="line">print(arr)  <span class="comment"># array([ 1.,  2.,  3.,  4.,  5.])</span></span><br><span class="line"></span><br><span class="line">arr = np.linspace(<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="literal">False</span>)</span><br><span class="line">print(arr)  <span class="comment"># array([ 1. ,  1.8,  2.6,  3.4,  4.2])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.eye(N, M=None, k=0, dtype=&lt;class 'float'&gt;, order='C')</span></span><br><span class="line"><span class="comment"># 返回一个二维数组，其中对角线为1，其他位置为零。k：对角线的索引：0（默认值）是主对角线，正值指的是上对角线，负值指的是下对角线。</span></span><br><span class="line">arr = np.eye(<span class="number">2</span>, dtype=int)</span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([[1, 0],</span></span><br><span class="line"><span class="comment">#        [0, 1]])</span></span><br><span class="line"></span><br><span class="line">arr = np.eye(<span class="number">3</span>, k=<span class="number">1</span>)</span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([[0.,  1.,  0.],</span></span><br><span class="line"><span class="comment">#       [0.,  0.,  1.],</span></span><br><span class="line"><span class="comment">#       [0.,  0.,  0.]])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ones_like，zeros_like，empty_like函数</span></span><br><span class="line"><span class="comment"># 返回一个与给定数组具有相同形状和类型的数组。</span></span><br><span class="line">x = np.arange(<span class="number">6</span>)</span><br><span class="line">x = x.reshape((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># array([[0, 1, 2],</span></span><br><span class="line"><span class="comment">#       [3, 4, 5]])</span></span><br><span class="line">arr = np.ones_like(x)  <span class="comment"># zeros_like，empty_like雷同</span></span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([[1, 1, 1],</span></span><br><span class="line"><span class="comment">#        [1, 1, 1]])</span></span><br></pre></td></tr></table></figure><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>])</span><br><span class="line">b = np.arange(<span class="number">4</span>)</span><br><span class="line">print(b)  <span class="comment"># array([0, 1, 2, 3])</span></span><br><span class="line">c = a - b</span><br><span class="line">print(c)  <span class="comment"># array([20, 29, 38, 47])</span></span><br><span class="line"></span><br><span class="line">d = b ** <span class="number">2</span> </span><br><span class="line">print(d)  <span class="comment"># array([0, 1, 4, 9])</span></span><br><span class="line">e = <span class="number">10</span> * np.sin(a)</span><br><span class="line">print(e)  <span class="comment"># array([ 9.12945251, -9.88031624,  7.4511316 , -2.62374854])</span></span><br><span class="line">f = a &lt; <span class="number">35</span></span><br><span class="line">print(f)  <span class="comment"># array([ True, True, False, False])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵(数组)*点乘和@叉乘</span></span><br><span class="line">A = np.array([[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">B = np.array([[<span class="number">2</span>,<span class="number">0</span>],</span><br><span class="line">           [<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">print(A * B)</span><br><span class="line"><span class="comment"># array([[2, 0],</span></span><br><span class="line"><span class="comment">#        [0, 4]])</span></span><br><span class="line">print(A @ B)  <span class="comment"># 同 A.dot(B)</span></span><br><span class="line"><span class="comment"># array([[5, 4],</span></span><br><span class="line"><span class="comment">#        [3, 4]])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重设形状</span></span><br><span class="line"><span class="comment"># np.reshape(shape, order='C')</span></span><br><span class="line">print(np.arange(<span class="number">6</span>).reshape((<span class="number">3</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="comment"># [[0 1]</span></span><br><span class="line"><span class="comment">#  [2 3]</span></span><br><span class="line"><span class="comment">#  [4 5]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组展开</span></span><br><span class="line"><span class="comment"># np.ravel([order])  # order 表示变换时的读取顺序，默认是Order='C' 按照行依次读取，当 order='F' 时，可以按列依次读取</span></span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape((<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">print(arr.ravel())  <span class="comment"># array([0, 1, 2, 3, 4, 5])</span></span><br><span class="line">print(arr.ravel(<span class="string">'F'</span>)  <span class="comment"># array([0, 2, 4, 1, 3, 5])</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><strong>大小相等的数组之间的任何算术运算都会将运算应用到元素级</strong></li><li><strong>数组与标量的算术运算会将标量值传播到各个元素</strong></li></ul><h4 id="索引-切片-迭代"><a href="#索引-切片-迭代" class="headerlink" title="索引, 切片, 迭代"></a>索引, 切片, 迭代</h4><h5 id="1-一维数组操作"><a href="#1-一维数组操作" class="headerlink" title="(1) 一维数组操作"></a>(1) 一维数组操作</h5><p>一维数组可以进行索引，切片和迭代操作，就像列表和其他Python序列一样。</p><p><strong>Example: </strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>) ** <span class="number">3</span></span><br><span class="line">print(a)  <span class="comment"># array([ 0, 1, 8, 27, 64, 125, 216, 343, 512, 729])</span></span><br><span class="line"></span><br><span class="line">print(a[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># array([8, 27, 64])</span></span><br><span class="line">a[:<span class="number">6</span>:<span class="number">2</span>] = <span class="number">1000</span>  <span class="comment"># 等同于a[0:6:2] = -1000 即 0 2 4 置为0</span></span><br><span class="line">a[::<span class="number">-1</span>]  <span class="comment"># array([729, 512, 343, 216, 125, -1000, 27, -1000, 1, -1000])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i)  <span class="comment"># 0 1 ...</span></span><br></pre></td></tr></table></figure><h5 id="2-多维数组操作"><a href="#2-多维数组操作" class="headerlink" title="(2) 多维数组操作"></a>(2) 多维数组操作</h5><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>   <span class="keyword">return</span> <span class="number">10</span> * x + y</span><br><span class="line">&gt;&gt; arr = np.fromfunction(f, (<span class="number">5</span>, <span class="number">4</span>), dtype=int)</span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],</span><br><span class="line">       [<span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>],</span><br><span class="line">       [<span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>]])</span><br><span class="line">&gt;&gt; b[<span class="number">1</span>, <span class="number">3</span>]  <span class="comment"># b[行索引, 列索引]</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line">&gt;&gt; b[<span class="number">0</span>:<span class="number">5</span>, <span class="number">1</span>]  <span class="comment"># 每一行的第1列</span></span><br><span class="line">array([ <span class="number">1</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">31</span>, <span class="number">41</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt; b[<span class="number">1</span>:<span class="number">3</span>, :]  <span class="comment"># 第1-2行的所有列</span></span><br><span class="line">array([[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]])</span><br><span class="line"></span><br><span class="line">&gt;&gt; c = np.arange(<span class="number">12</span>)</span><br><span class="line">&gt;&gt; print(c)</span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line">&gt;&gt; print(c[<span class="number">4</span>])  <span class="comment"># 4</span></span><br><span class="line">&gt;&gt; c.shape = (<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># c变为2维数组</span></span><br><span class="line">&gt;&gt; print(c)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><p>当提供的索引数少于轴数时，缺失的索引将被视为完整切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; b[<span class="number">-1</span>]  <span class="comment"># 取最后一行,等同于b[-1,:]</span></span><br><span class="line">array([<span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>])</span><br></pre></td></tr></table></figure><p>针对第一个轴对多维数组进行迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line"><span class="meta">... </span>   print(i)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span>]</span><br><span class="line">[<span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]</span><br><span class="line">[<span class="number">30</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span>]</span><br><span class="line">[<span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过np.flat遍历每一个元素, flat属性返回一个迭代器, </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> b.flat:</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="3-整数数组索引"><a href="#3-整数数组索引" class="headerlink" title="(3) 整数数组索引"></a>(3) 整数数组索引</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">&gt;&gt; arr[np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">7</span>])]  <span class="comment"># 由值2，2，-3和7组成的索引数组相应地创建了一个长度为4的数组。</span></span><br><span class="line">array([<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">6</span>).reshape((<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span>]]</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr2 = arr[[<span class="number">0</span>,<span class="number">1</span>]]  <span class="comment"># 获取0,1行的值</span></span><br><span class="line">&gt;&gt; print(arr2)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这种情况，如果索引数组具有匹配的形状，并且索引数组的每个维都有一个索引数组，则结果数组具有与索引数组相同的形状，并且这些值对应于每个索引集的索引在索引数组中的位置。在此示例中，两个索引数组的第一个索引值为0，因此结果数组的第一个值为arr3[0,0]。下一个值是arr3[1,1]，最后一个是arr3[2,3]</span></span><br><span class="line">&gt;&gt; arr3 = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&gt;&gt; print(arr3)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">&gt;&gt; arr3[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>]]</span><br><span class="line">[<span class="number">0</span>  <span class="number">5</span> <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr4 = arr3[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>]]  <span class="comment"># 获取0,1行第1列的值, 尝试将它们广播到相同的形状，即取值arr3[0,1]，arr3[1, 1], arr3[2, 1]</span></span><br><span class="line">&gt;&gt; print(arr4)</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">12</span>).reshape((<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line">&gt;&gt; rows = np.array([[<span class="number">0</span>,<span class="number">0</span>], [<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">&gt;&gt; cols = np.array([[<span class="number">0</span>,<span class="number">2</span>], [<span class="number">0</span>,<span class="number">2</span>]])</span><br><span class="line">&gt;&gt; x = arr[rows, cols]  <span class="comment"># 取四个角元素</span></span><br><span class="line">&gt;&gt; print(x)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><h5 id="4-布尔索引"><a href="#4-布尔索引" class="headerlink" title="(4) 布尔索引"></a>(4) 布尔索引</h5><p>布尔数组的形状必须与被索引数组的初始维度相同，其中包含索引数组中所有对应于布尔数组中所有真实元素的元素。</p><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">&gt;&gt; x = arr &gt; <span class="number">7</span></span><br><span class="line">&gt;&gt; print(x)</span><br><span class="line">[[<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line"> [<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line"> [ <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span>]]</span><br><span class="line">&gt;&gt;  arr[x]  <span class="comment"># 结果为一维数组</span></span><br><span class="line">array([ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt; y = x[:, <span class="number">1</span>]</span><br><span class="line">&gt;&gt; print(y)  <span class="comment"># 所有行的第一列元素(广播)</span></span><br><span class="line">[<span class="literal">False</span> <span class="literal">False</span>  <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr[y]  <span class="comment"># 即取第2行, 0,1行为False不取</span></span><br><span class="line">array([[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br></pre></td></tr></table></figure><h4 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h4><p>广播(Broadcast)是 numpy 对不同shape的数组进行数值计算的方式，对数组的算术运算通常是元素级别的。</p><p>如果两个数组 a 和 b 形状相同，即满足<code>a.shape == b.shape</code>，那么 a*b 的结果就是 a 与 b 数组对应位置的元素相乘。这要求维数相同，且各维度的长度相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">arr2 = np.arange(<span class="number">11</span>, <span class="number">14</span>)</span><br><span class="line">arr = arr1 + arr2</span><br><span class="line">print(arr)  <span class="comment"># [12 14 16]</span></span><br></pre></td></tr></table></figure><p>当执行操作的两个数组, shape不同时,会自动触发广播机制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr2 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">&gt;&gt; arr3 = np.arange(<span class="number">12</span>).reshape((<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = arr2 + arr3  <span class="comment"># ==&gt; 等同于 arr2为[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]相加</span></span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">[[ <span class="number">1</span>  <span class="number">3</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">6</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">7</span>  <span class="number">9</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">12</span> <span class="number">14</span>]]</span><br></pre></td></tr></table></figure><p>参考文档：</p><p><a href="https://www.numpy.org/devdocs/user/quickstart.html" target="_blank" rel="noopener">https://www.numpy.org/devdocs/user/quickstart.html</a></p><p> <a href="https://www.numpy.org.cn/user_guide/numpy_basics/indexing.html" target="_blank" rel="noopener">https://www.numpy.org.cn/user_guide/numpy_basics/indexing.html</a> </p><p><a href="https://www.runoob.com/numpy/numpy-broadcast.html" target="_blank" rel="noopener">https://www.runoob.com/numpy/numpy-broadcast.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;NumPy的基本使用&quot;&gt;&lt;a href=&quot;#NumPy的基本使用&quot; class=&quot;headerlink&quot; title=&quot;NumPy的基本使用&quot;&gt;&lt;/a&gt;NumPy的基本使用&lt;/h4&gt;&lt;p&gt;Numpy是一个开源的Python科学计算库，它是Python进行科学计算的基础库，许多著名的科学计算库如Pandas，Scikit-learn等都要用到Numpy库的一些功能。NumPy根据BSD许可证授权，只需很少的限制即可重复使用。&lt;br&gt;
    
    </summary>
    
      <category term="数据分析与机器学习" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据" scheme="https://fanhang64.github.io/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
